{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ListDatabasesOperation = void 0;\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n\nconst utils_1 = require(\"../utils\");\n/** @internal */\n\n\nclass ListDatabasesOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.ns = new utils_1.MongoDBNamespace('admin', '$cmd');\n  }\n\n  execute(server, session, callback) {\n    const cmd = {\n      listDatabases: 1\n    };\n\n    if (this.options.nameOnly) {\n      cmd.nameOnly = Number(cmd.nameOnly);\n    }\n\n    if (this.options.filter) {\n      cmd.filter = this.options.filter;\n    }\n\n    if (typeof this.options.authorizedDatabases === 'boolean') {\n      cmd.authorizedDatabases = this.options.authorizedDatabases;\n    }\n\n    super.executeCommand(server, session, cmd, callback);\n  }\n\n}\n\nexports.ListDatabasesOperation = ListDatabasesOperation;\n(0, operation_1.defineAspects)(ListDatabasesOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/operations/list_databases.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAwBA;;;AACA,MAAa,sBAAb,SAA4C,SAAA,CAAA,gBAA5C,CAAiF;AAG/E,EAAA,WAAA,CAAY,EAAZ,EAAoB,OAApB,EAAkD;AAChD,UAAM,EAAN,EAAU,OAAV;AACA,SAAK,OAAL,GAAe,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAA,OAAA,GAAW,EAA1B;AACA,SAAK,EAAL,GAAU,IAAI,OAAA,CAAA,gBAAJ,CAAqB,OAArB,EAA8B,MAA9B,CAAV;AACD;;AAED,EAAA,OAAO,CAAC,MAAD,EAAiB,OAAjB,EAAyC,QAAzC,EAAgF;AACrF,UAAM,GAAG,GAAa;AAAE,MAAA,aAAa,EAAE;AAAjB,KAAtB;;AACA,QAAI,KAAK,OAAL,CAAa,QAAjB,EAA2B;AACzB,MAAA,GAAG,CAAC,QAAJ,GAAe,MAAM,CAAC,GAAG,CAAC,QAAL,CAArB;AACD;;AAED,QAAI,KAAK,OAAL,CAAa,MAAjB,EAAyB;AACvB,MAAA,GAAG,CAAC,MAAJ,GAAa,KAAK,OAAL,CAAa,MAA1B;AACD;;AAED,QAAI,OAAO,KAAK,OAAL,CAAa,mBAApB,KAA4C,SAAhD,EAA2D;AACzD,MAAA,GAAG,CAAC,mBAAJ,GAA0B,KAAK,OAAL,CAAa,mBAAvC;AACD;;AAED,UAAM,cAAN,CAAqB,MAArB,EAA6B,OAA7B,EAAsC,GAAtC,EAA2C,QAA3C;AACD;;AAxB8E;;AAAjF,OAAA,CAAA,sBAAA,GAAA,sBAAA;AA2BA,CAAA,GAAA,WAAA,CAAA,aAAA,EAAc,sBAAd,EAAsC,CAAC,WAAA,CAAA,MAAA,CAAO,cAAR,EAAwB,WAAA,CAAA,MAAA,CAAO,SAA/B,CAAtC","sourcesContent":["import { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\nimport { MongoDBNamespace, Callback } from '../utils';\nimport type { Document } from '../bson';\nimport type { Server } from '../sdam/server';\nimport type { Db } from '../db';\nimport type { ClientSession } from '../sessions';\n\n/** @public */\nexport interface ListDatabasesResult {\n  databases: ({ name: string; sizeOnDisk?: number; empty?: boolean } & Document)[];\n  totalSize?: number;\n  totalSizeMb?: number;\n  ok: 1 | 0;\n}\n\n/** @public */\nexport interface ListDatabasesOptions extends CommandOperationOptions {\n  /** A query predicate that determines which databases are listed */\n  filter?: Document;\n  /** A flag to indicate whether the command should return just the database names, or return both database names and size information */\n  nameOnly?: boolean;\n  /** A flag that determines which databases are returned based on the user privileges when access control is enabled */\n  authorizedDatabases?: boolean;\n}\n\n/** @internal */\nexport class ListDatabasesOperation extends CommandOperation<ListDatabasesResult> {\n  options: ListDatabasesOptions;\n\n  constructor(db: Db, options?: ListDatabasesOptions) {\n    super(db, options);\n    this.options = options ?? {};\n    this.ns = new MongoDBNamespace('admin', '$cmd');\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<ListDatabasesResult>): void {\n    const cmd: Document = { listDatabases: 1 };\n    if (this.options.nameOnly) {\n      cmd.nameOnly = Number(cmd.nameOnly);\n    }\n\n    if (this.options.filter) {\n      cmd.filter = this.options.filter;\n    }\n\n    if (typeof this.options.authorizedDatabases === 'boolean') {\n      cmd.authorizedDatabases = this.options.authorizedDatabases;\n    }\n\n    super.executeCommand(server, session, cmd, callback);\n  }\n}\n\ndefineAspects(ListDatabasesOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE]);\n"]},"metadata":{},"sourceType":"script"}