{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CountOperation = void 0;\n\nconst operation_1 = require(\"./operation\");\n\nconst command_1 = require(\"./command\");\n/** @internal */\n\n\nclass CountOperation extends command_1.CommandOperation {\n  constructor(namespace, filter, options) {\n    super({\n      s: {\n        namespace: namespace\n      }\n    }, options);\n    this.options = options;\n    this.collectionName = namespace.collection;\n    this.query = filter;\n  }\n\n  execute(server, session, callback) {\n    const options = this.options;\n    const cmd = {\n      count: this.collectionName,\n      query: this.query\n    };\n\n    if (typeof options.limit === 'number') {\n      cmd.limit = options.limit;\n    }\n\n    if (typeof options.skip === 'number') {\n      cmd.skip = options.skip;\n    }\n\n    if (options.hint != null) {\n      cmd.hint = options.hint;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      callback(err, result ? result.n : 0);\n    });\n  }\n\n}\n\nexports.CountOperation = CountOperation;\n(0, operation_1.defineAspects)(CountOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE]);","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/operations/count.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAmBA;;;AACA,MAAa,cAAb,SAAoC,SAAA,CAAA,gBAApC,CAA4D;AAK1D,EAAA,WAAA,CAAY,SAAZ,EAAyC,MAAzC,EAA2D,OAA3D,EAAgF;AAC9E,UAAM;AAAE,MAAA,CAAC,EAAE;AAAE,QAAA,SAAS,EAAE;AAAb;AAAL,KAAN,EAAgE,OAAhE;AAEA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,cAAL,GAAsB,SAAS,CAAC,UAAhC;AACA,SAAK,KAAL,GAAa,MAAb;AACD;;AAED,EAAA,OAAO,CAAC,MAAD,EAAiB,OAAjB,EAAyC,QAAzC,EAAmE;AACxE,UAAM,OAAO,GAAG,KAAK,OAArB;AACA,UAAM,GAAG,GAAa;AACpB,MAAA,KAAK,EAAE,KAAK,cADQ;AAEpB,MAAA,KAAK,EAAE,KAAK;AAFQ,KAAtB;;AAKA,QAAI,OAAO,OAAO,CAAC,KAAf,KAAyB,QAA7B,EAAuC;AACrC,MAAA,GAAG,CAAC,KAAJ,GAAY,OAAO,CAAC,KAApB;AACD;;AAED,QAAI,OAAO,OAAO,CAAC,IAAf,KAAwB,QAA5B,EAAsC;AACpC,MAAA,GAAG,CAAC,IAAJ,GAAW,OAAO,CAAC,IAAnB;AACD;;AAED,QAAI,OAAO,CAAC,IAAR,IAAgB,IAApB,EAA0B;AACxB,MAAA,GAAG,CAAC,IAAJ,GAAW,OAAO,CAAC,IAAnB;AACD;;AAED,QAAI,OAAO,OAAO,CAAC,SAAf,KAA6B,QAAjC,EAA2C;AACzC,MAAA,GAAG,CAAC,SAAJ,GAAgB,OAAO,CAAC,SAAxB;AACD;;AAED,UAAM,cAAN,CAAqB,MAArB,EAA6B,OAA7B,EAAsC,GAAtC,EAA2C,CAAC,GAAD,EAAM,MAAN,KAAgB;AACzD,MAAA,QAAQ,CAAC,GAAD,EAAM,MAAM,GAAG,MAAM,CAAC,CAAV,GAAc,CAA1B,CAAR;AACD,KAFD;AAGD;;AAvCyD;;AAA5D,OAAA,CAAA,cAAA,GAAA,cAAA;AA0CA,CAAA,GAAA,WAAA,CAAA,aAAA,EAAc,cAAd,EAA8B,CAAC,WAAA,CAAA,MAAA,CAAO,cAAR,EAAwB,WAAA,CAAA,MAAA,CAAO,SAA/B,CAA9B","sourcesContent":["import { Aspect, defineAspects } from './operation';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport type { Callback, MongoDBNamespace } from '../utils';\nimport type { Document } from '../bson';\nimport type { Server } from '../sdam/server';\nimport type { Collection } from '../collection';\nimport type { ClientSession } from '../sessions';\n\n/** @public */\nexport interface CountOptions extends CommandOperationOptions {\n  /** The number of documents to skip. */\n  skip?: number;\n  /** The maximum amounts to count before aborting. */\n  limit?: number;\n  /** Number of milliseconds to wait before aborting the query. */\n  maxTimeMS?: number;\n  /** An index name hint for the query. */\n  hint?: string | Document;\n}\n\n/** @internal */\nexport class CountOperation extends CommandOperation<number> {\n  options: CountOptions;\n  collectionName?: string;\n  query: Document;\n\n  constructor(namespace: MongoDBNamespace, filter: Document, options: CountOptions) {\n    super({ s: { namespace: namespace } } as unknown as Collection, options);\n\n    this.options = options;\n    this.collectionName = namespace.collection;\n    this.query = filter;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<number>): void {\n    const options = this.options;\n    const cmd: Document = {\n      count: this.collectionName,\n      query: this.query\n    };\n\n    if (typeof options.limit === 'number') {\n      cmd.limit = options.limit;\n    }\n\n    if (typeof options.skip === 'number') {\n      cmd.skip = options.skip;\n    }\n\n    if (options.hint != null) {\n      cmd.hint = options.hint;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      callback(err, result ? result.n : 0);\n    });\n  }\n}\n\ndefineAspects(CountOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE]);\n"]},"metadata":{},"sourceType":"script"}