{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\n\nconst command_1 = require(\"./command\");\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nexports.DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */\n\nclass AggregateOperation extends command_1.CommandOperation {\n  constructor(ns, pipeline, options) {\n    super(undefined, { ...options,\n      dbName: ns.db\n    });\n    this.options = options !== null && options !== void 0 ? options : {}; // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n\n    this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n    this.pipeline = pipeline; // determine if we have a write stage, override read preference if so\n\n    this.hasWriteStage = false;\n\n    if (typeof (options === null || options === void 0 ? void 0 : options.out) === 'string') {\n      this.pipeline = this.pipeline.concat({\n        $out: options.out\n      });\n      this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      const finalStage = pipeline[pipeline.length - 1];\n\n      if (finalStage.$out || finalStage.$merge) {\n        this.hasWriteStage = true;\n      }\n    }\n\n    if (this.hasWriteStage) {\n      this.trySecondaryWrite = true;\n    }\n\n    if (this.explain && this.writeConcern) {\n      throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n    }\n\n    if ((options === null || options === void 0 ? void 0 : options.cursor) != null && typeof options.cursor !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Cursor options must be an object');\n    }\n  }\n\n  get canRetryRead() {\n    return !this.hasWriteStage;\n  }\n\n  addToPipeline(stage) {\n    this.pipeline.push(stage);\n  }\n\n  execute(server, session, callback) {\n    const options = this.options;\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const command = {\n      aggregate: this.target,\n      pipeline: this.pipeline\n    };\n\n    if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n      this.readConcern = undefined;\n    }\n\n    if (serverWireVersion >= 5) {\n      if (this.hasWriteStage && this.writeConcern) {\n        Object.assign(command, {\n          writeConcern: this.writeConcern\n        });\n      }\n    }\n\n    if (options.bypassDocumentValidation === true) {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (typeof options.allowDiskUse === 'boolean') {\n      command.allowDiskUse = options.allowDiskUse;\n    }\n\n    if (options.hint) {\n      command.hint = options.hint;\n    }\n\n    if (options.let) {\n      command.let = options.let;\n    }\n\n    command.cursor = options.cursor || {};\n\n    if (options.batchSize && !this.hasWriteStage) {\n      command.cursor.batchSize = options.batchSize;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n\n}\n\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/operations/aggregate.ts"],"names":[],"mappings":"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","sourcesContent":["import { CommandOperation, CommandOperationOptions, CollationOptions } from './command';\nimport { MongoInvalidArgumentError } from '../error';\nimport { maxWireVersion, MongoDBNamespace } from '../utils';\nimport { Aspect, defineAspects, Hint } from './operation';\nimport type { Callback } from '../utils';\nimport type { Document } from '../bson';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\n\n/** @internal */\nexport const DB_AGGREGATE_COLLECTION = 1 as const;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8 as const;\n\n/** @public */\nexport interface AggregateOptions extends CommandOperationOptions {\n  /** allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 \\>). */\n  allowDiskUse?: boolean;\n  /** The number of documents to return per batch. See [aggregation documentation](https://docs.mongodb.com/manual/reference/command/aggregate). */\n  batchSize?: number;\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n  bypassDocumentValidation?: boolean;\n  /** Return the query as cursor, on 2.6 \\> it returns as a real cursor on pre 2.6 it returns as an emulated cursor. */\n  cursor?: Document;\n  /** specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point. */\n  maxTimeMS?: number;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. */\n  maxAwaitTimeMS?: number;\n  /** Specify collation. */\n  collation?: CollationOptions;\n  /** Add an index selection hint to an aggregation command */\n  hint?: Hint;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n  out?: string;\n}\n\n/** @internal */\nexport class AggregateOperation<T = Document> extends CommandOperation<T> {\n  options: AggregateOptions;\n  target: string | typeof DB_AGGREGATE_COLLECTION;\n  pipeline: Document[];\n  hasWriteStage: boolean;\n\n  constructor(ns: MongoDBNamespace, pipeline: Document[], options?: AggregateOptions) {\n    super(undefined, { ...options, dbName: ns.db });\n\n    this.options = options ?? {};\n\n    // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n    this.target = ns.collection || DB_AGGREGATE_COLLECTION;\n\n    this.pipeline = pipeline;\n\n    // determine if we have a write stage, override read preference if so\n    this.hasWriteStage = false;\n    if (typeof options?.out === 'string') {\n      this.pipeline = this.pipeline.concat({ $out: options.out });\n      this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      const finalStage = pipeline[pipeline.length - 1];\n      if (finalStage.$out || finalStage.$merge) {\n        this.hasWriteStage = true;\n      }\n    }\n\n    if (this.hasWriteStage) {\n      this.trySecondaryWrite = true;\n    }\n\n    if (this.explain && this.writeConcern) {\n      throw new MongoInvalidArgumentError(\n        'Option \"explain\" cannot be used on an aggregate call with writeConcern'\n      );\n    }\n\n    if (options?.cursor != null && typeof options.cursor !== 'object') {\n      throw new MongoInvalidArgumentError('Cursor options must be an object');\n    }\n  }\n\n  get canRetryRead(): boolean {\n    return !this.hasWriteStage;\n  }\n\n  addToPipeline(stage: Document): void {\n    this.pipeline.push(stage);\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<T>): void {\n    const options: AggregateOptions = this.options;\n    const serverWireVersion = maxWireVersion(server);\n    const command: Document = { aggregate: this.target, pipeline: this.pipeline };\n\n    if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n      this.readConcern = undefined;\n    }\n\n    if (serverWireVersion >= 5) {\n      if (this.hasWriteStage && this.writeConcern) {\n        Object.assign(command, { writeConcern: this.writeConcern });\n      }\n    }\n\n    if (options.bypassDocumentValidation === true) {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (typeof options.allowDiskUse === 'boolean') {\n      command.allowDiskUse = options.allowDiskUse;\n    }\n\n    if (options.hint) {\n      command.hint = options.hint;\n    }\n\n    if (options.let) {\n      command.let = options.let;\n    }\n\n    command.cursor = options.cursor || {};\n    if (options.batchSize && !this.hasWriteStage) {\n      command.cursor.batchSize = options.batchSize;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\ndefineAspects(AggregateOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXPLAINABLE,\n  Aspect.CURSOR_CREATING\n]);\n"]},"metadata":{},"sourceType":"script"}