{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProfilingLevelOperation = void 0;\n\nconst command_1 = require(\"./command\");\n\nconst error_1 = require(\"../error\");\n/** @internal */\n\n\nclass ProfilingLevelOperation extends command_1.CommandOperation {\n  constructor(db, options) {\n    super(db, options);\n    this.options = options;\n  }\n\n  execute(server, session, callback) {\n    super.executeCommand(server, session, {\n      profile: -1\n    }, (err, doc) => {\n      if (err == null && doc.ok === 1) {\n        const was = doc.was;\n        if (was === 0) return callback(undefined, 'off');\n        if (was === 1) return callback(undefined, 'slow_only');\n        if (was === 2) return callback(undefined, 'all'); // TODO(NODE-3483)\n\n        return callback(new error_1.MongoRuntimeError(`Illegal profiling level value ${was}`));\n      } else {\n        // TODO(NODE-3483): Consider MongoUnexpectedServerResponseError\n        err != null ? callback(err) : callback(new error_1.MongoRuntimeError('Error with profile command'));\n      }\n    });\n  }\n\n}\n\nexports.ProfilingLevelOperation = ProfilingLevelOperation;","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/operations/profiling_level.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAKA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAKA;;;AACA,MAAa,uBAAb,SAA6C,SAAA,CAAA,gBAA7C,CAAqE;AAGnE,EAAA,WAAA,CAAY,EAAZ,EAAoB,OAApB,EAAkD;AAChD,UAAM,EAAN,EAAU,OAAV;AACA,SAAK,OAAL,GAAe,OAAf;AACD;;AAED,EAAA,OAAO,CAAC,MAAD,EAAiB,OAAjB,EAAyC,QAAzC,EAAmE;AACxE,UAAM,cAAN,CAAqB,MAArB,EAA6B,OAA7B,EAAsC;AAAE,MAAA,OAAO,EAAE,CAAC;AAAZ,KAAtC,EAAuD,CAAC,GAAD,EAAM,GAAN,KAAa;AAClE,UAAI,GAAG,IAAI,IAAP,IAAe,GAAG,CAAC,EAAJ,KAAW,CAA9B,EAAiC;AAC/B,cAAM,GAAG,GAAG,GAAG,CAAC,GAAhB;AACA,YAAI,GAAG,KAAK,CAAZ,EAAe,OAAO,QAAQ,CAAC,SAAD,EAAY,KAAZ,CAAf;AACf,YAAI,GAAG,KAAK,CAAZ,EAAe,OAAO,QAAQ,CAAC,SAAD,EAAY,WAAZ,CAAf;AACf,YAAI,GAAG,KAAK,CAAZ,EAAe,OAAO,QAAQ,CAAC,SAAD,EAAY,KAAZ,CAAf,CAJgB,CAK/B;;AACA,eAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,iBAAJ,CAAsB,iCAAiC,GAAG,EAA1D,CAAD,CAAf;AACD,OAPD,MAOO;AACL;AACA,QAAA,GAAG,IAAI,IAAP,GAAc,QAAQ,CAAC,GAAD,CAAtB,GAA8B,QAAQ,CAAC,IAAI,OAAA,CAAA,iBAAJ,CAAsB,4BAAtB,CAAD,CAAtC;AACD;AACF,KAZD;AAaD;;AAtBkE;;AAArE,OAAA,CAAA,uBAAA,GAAA,uBAAA","sourcesContent":["import { CommandOperation, CommandOperationOptions } from './command';\nimport type { Callback } from '../utils';\nimport type { Server } from '../sdam/server';\nimport type { Db } from '../db';\nimport type { ClientSession } from '../sessions';\nimport { MongoRuntimeError } from '../error';\n\n/** @public */\nexport type ProfilingLevelOptions = CommandOperationOptions;\n\n/** @internal */\nexport class ProfilingLevelOperation extends CommandOperation<string> {\n  options: ProfilingLevelOptions;\n\n  constructor(db: Db, options: ProfilingLevelOptions) {\n    super(db, options);\n    this.options = options;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<string>): void {\n    super.executeCommand(server, session, { profile: -1 }, (err, doc) => {\n      if (err == null && doc.ok === 1) {\n        const was = doc.was;\n        if (was === 0) return callback(undefined, 'off');\n        if (was === 1) return callback(undefined, 'slow_only');\n        if (was === 2) return callback(undefined, 'all');\n        // TODO(NODE-3483)\n        return callback(new MongoRuntimeError(`Illegal profiling level value ${was}`));\n      } else {\n        // TODO(NODE-3483): Consider MongoUnexpectedServerResponseError\n        err != null ? callback(err) : callback(new MongoRuntimeError('Error with profile command'));\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}