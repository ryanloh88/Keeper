{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AddUserOperation = void 0;\n\nconst crypto = require(\"crypto\");\n\nconst operation_1 = require(\"./operation\");\n\nconst command_1 = require(\"./command\");\n\nconst error_1 = require(\"../error\");\n\nconst utils_1 = require(\"../utils\");\n/** @internal */\n\n\nclass AddUserOperation extends command_1.CommandOperation {\n  constructor(db, username, password, options) {\n    super(db, options);\n    this.db = db;\n    this.username = username;\n    this.password = password;\n    this.options = options !== null && options !== void 0 ? options : {};\n  }\n\n  execute(server, session, callback) {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options; // Error out if digestPassword set\n\n    if (options.digestPassword != null) {\n      return callback(new error_1.MongoInvalidArgumentError('Option \"digestPassword\" not supported via addUser, use db.command(...) instead'));\n    }\n\n    let roles;\n\n    if (!options.roles || Array.isArray(options.roles) && options.roles.length === 0) {\n      (0, utils_1.emitWarningOnce)('Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise');\n\n      if (db.databaseName.toLowerCase() === 'admin') {\n        roles = ['root'];\n      } else {\n        roles = ['dbOwner'];\n      }\n    } else {\n      roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n    }\n\n    const digestPassword = (0, utils_1.getTopology)(db).lastIsMaster().maxWireVersion >= 7;\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5'); // Generate keys used for authentication\n\n      md5.update(`${username}:mongo:${password}`);\n      userPassword = md5.digest('hex');\n    } // Build the command to execute\n\n\n    const command = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    }; // No password\n\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n\n}\n\nexports.AddUserOperation = AddUserOperation;\n(0, operation_1.defineAspects)(AddUserOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/operations/add_user.ts"],"names":[],"mappings":"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","sourcesContent":["import * as crypto from 'crypto';\nimport { Aspect, defineAspects } from './operation';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { MongoInvalidArgumentError } from '../error';\nimport { Callback, emitWarningOnce, getTopology } from '../utils';\nimport type { Document } from '../bson';\nimport type { Server } from '../sdam/server';\nimport type { Db } from '../db';\nimport type { ClientSession } from '../sessions';\n\n/** @public */\nexport interface RoleSpecification {\n  /**\n   * A role grants privileges to perform sets of actions on defined resources.\n   * A given role applies to the database on which it is defined and can grant access down to a collection level of granularity.\n   */\n  role: string;\n  /** The database this user's role should effect. */\n  db: string;\n}\n\n/** @public */\nexport interface AddUserOptions extends CommandOperationOptions {\n  /** @deprecated Please use db.command('createUser', ...) instead for this option */\n  digestPassword?: null;\n  /** Roles associated with the created user */\n  roles?: string | string[] | RoleSpecification | RoleSpecification[];\n  /** Custom data associated with the user (only Mongodb 2.6 or higher) */\n  customData?: Document;\n}\n\n/** @internal */\nexport class AddUserOperation extends CommandOperation<Document> {\n  options: AddUserOptions;\n  db: Db;\n  username: string;\n  password?: string;\n\n  constructor(db: Db, username: string, password: string | undefined, options?: AddUserOptions) {\n    super(db, options);\n\n    this.db = db;\n    this.username = username;\n    this.password = password;\n    this.options = options ?? {};\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<Document>): void {\n    const db = this.db;\n    const username = this.username;\n    const password = this.password;\n    const options = this.options;\n\n    // Error out if digestPassword set\n    if (options.digestPassword != null) {\n      return callback(\n        new MongoInvalidArgumentError(\n          'Option \"digestPassword\" not supported via addUser, use db.command(...) instead'\n        )\n      );\n    }\n\n    let roles;\n    if (!options.roles || (Array.isArray(options.roles) && options.roles.length === 0)) {\n      emitWarningOnce(\n        'Creating a user without roles is deprecated. Defaults to \"root\" if db is \"admin\" or \"dbOwner\" otherwise'\n      );\n      if (db.databaseName.toLowerCase() === 'admin') {\n        roles = ['root'];\n      } else {\n        roles = ['dbOwner'];\n      }\n    } else {\n      roles = Array.isArray(options.roles) ? options.roles : [options.roles];\n    }\n\n    const digestPassword = getTopology(db).lastIsMaster().maxWireVersion >= 7;\n\n    let userPassword = password;\n\n    if (!digestPassword) {\n      // Use node md5 generator\n      const md5 = crypto.createHash('md5');\n      // Generate keys used for authentication\n      md5.update(`${username}:mongo:${password}`);\n      userPassword = md5.digest('hex');\n    }\n\n    // Build the command to execute\n    const command: Document = {\n      createUser: username,\n      customData: options.customData || {},\n      roles: roles,\n      digestPassword\n    };\n\n    // No password\n    if (typeof password === 'string') {\n      command.pwd = userPassword;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\ndefineAspects(AddUserOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script"}