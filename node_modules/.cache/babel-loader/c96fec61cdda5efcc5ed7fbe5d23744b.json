{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collection = void 0;\n\nconst utils_1 = require(\"./utils\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst utils_2 = require(\"./utils\");\n\nconst bson_1 = require(\"./bson\");\n\nconst error_1 = require(\"./error\");\n\nconst unordered_1 = require(\"./bulk/unordered\");\n\nconst ordered_1 = require(\"./bulk/ordered\");\n\nconst change_stream_1 = require(\"./change_stream\");\n\nconst write_concern_1 = require(\"./write_concern\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\n\nconst bulk_write_1 = require(\"./operations/bulk_write\");\n\nconst count_documents_1 = require(\"./operations/count_documents\");\n\nconst indexes_1 = require(\"./operations/indexes\");\n\nconst distinct_1 = require(\"./operations/distinct\");\n\nconst drop_1 = require(\"./operations/drop\");\n\nconst estimated_document_count_1 = require(\"./operations/estimated_document_count\");\n\nconst find_and_modify_1 = require(\"./operations/find_and_modify\");\n\nconst insert_1 = require(\"./operations/insert\");\n\nconst update_1 = require(\"./operations/update\");\n\nconst delete_1 = require(\"./operations/delete\");\n\nconst is_capped_1 = require(\"./operations/is_capped\");\n\nconst map_reduce_1 = require(\"./operations/map_reduce\");\n\nconst options_operation_1 = require(\"./operations/options_operation\");\n\nconst rename_1 = require(\"./operations/rename\");\n\nconst stats_1 = require(\"./operations/stats\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst find_cursor_1 = require(\"./cursor/find_cursor\");\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/update/remove/find and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Show that duplicate records got dropped\n *   col.find({}).toArray(function(err, items) {\n *     expect(err).to.not.exist;\n *     test.equal(4, items.length);\n *     client.close();\n *   });\n * });\n * ```\n */\n\n\nclass Collection {\n  /**\n   * Create a new Collection instance\n   * @internal\n   */\n  constructor(db, name, options) {\n    var _a, _b;\n\n    (0, utils_2.checkCollectionName)(name); // Internal state\n\n    this.s = {\n      db,\n      options,\n      namespace: new utils_2.MongoDBNamespace(db.databaseName, name),\n      pkFactory: (_b = (_a = db.options) === null || _a === void 0 ? void 0 : _a.pkFactory) !== null && _b !== void 0 ? _b : utils_1.DEFAULT_PK_FACTORY,\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, db),\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      slaveOk: options == null || options.slaveOk == null ? db.slaveOk : options.slaveOk\n    };\n  }\n  /**\n   * The name of the database this collection belongs to\n   */\n\n\n  get dbName() {\n    return this.s.namespace.db;\n  }\n  /**\n   * The name of this collection\n   */\n\n\n  get collectionName() {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.s.namespace.collection;\n  }\n  /**\n   * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n   */\n\n\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n  /**\n   * The current readConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n\n\n  get readConcern() {\n    if (this.s.readConcern == null) {\n      return this.s.db.readConcern;\n    }\n\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n\n\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.db.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  }\n  /**\n   * The current writeConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n\n\n  get writeConcern() {\n    if (this.s.writeConcern == null) {\n      return this.s.db.writeConcern;\n    }\n\n    return this.s.writeConcern;\n  }\n  /** The current index hint for the collection */\n\n\n  get hint() {\n    return this.s.collectionHint;\n  }\n\n  set hint(v) {\n    this.s.collectionHint = (0, utils_2.normalizeHintField)(v);\n  }\n\n  insertOne(doc, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    } // CSFLE passes in { w: 'majority' } to ensure the lib works in both 3.x and 4.x\n    // we support that option style here only\n\n\n    if (options && Reflect.get(options, 'w')) {\n      options.writeConcern = write_concern_1.WriteConcern.fromOptions(Reflect.get(options, 'w'));\n    }\n\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new insert_1.InsertOneOperation(this, doc, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  insertMany(docs, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options ? Object.assign({}, options) : {\n      ordered: true\n    };\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new insert_1.InsertManyOperation(this, docs, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  bulkWrite(operations, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options || {\n      ordered: true\n    };\n\n    if (!Array.isArray(operations)) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n    }\n\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new bulk_write_1.BulkWriteOperation(this, operations, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  updateOne(filter, update, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new update_1.UpdateOneOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  replaceOne(filter, replacement, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new update_1.ReplaceOneOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  updateMany(filter, update, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new update_1.UpdateManyOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  deleteOne(filter, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new delete_1.DeleteOneOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  deleteMany(filter, options, callback) {\n    if (filter == null) {\n      filter = {};\n      options = {};\n      callback = undefined;\n    } else if (typeof filter === 'function') {\n      callback = filter;\n      filter = {};\n      options = {};\n    } else if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new delete_1.DeleteManyOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  rename(newName, options, callback) {\n    if (typeof options === 'function') callback = options, options = {}; // Intentionally, we do not inherit options from parent for this operation.\n\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new rename_1.RenameOperation(this, newName, { ...options,\n      readPreference: read_preference_1.ReadPreference.PRIMARY\n    }), callback);\n  }\n\n  drop(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new drop_1.DropCollectionOperation(this.s.db, this.collectionName, options), callback);\n  }\n\n  findOne(filter, options, callback) {\n    if (callback != null && typeof callback !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Third parameter to `findOne()` must be a callback or undefined');\n    }\n\n    if (typeof filter === 'function') {\n      callback = filter;\n      filter = {};\n      options = {};\n    }\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    const finalFilter = filter !== null && filter !== void 0 ? filter : {};\n    const finalOptions = options !== null && options !== void 0 ? options : {};\n    return this.find(finalFilter, finalOptions).limit(-1).batchSize(1).next(callback);\n  }\n\n  find(filter, options) {\n    if (arguments.length > 2) {\n      throw new error_1.MongoInvalidArgumentError('Method \"collection.find()\" accepts at most two arguments');\n    }\n\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new find_cursor_1.FindCursor((0, utils_2.getTopology)(this), this.s.namespace, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n\n  options(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new options_operation_1.OptionsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  isCapped(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new is_capped_1.IsCappedOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  createIndex(indexSpec, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new indexes_1.CreateIndexOperation(this, this.collectionName, indexSpec, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  createIndexes(indexSpecs, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options ? Object.assign({}, options) : {};\n    if (typeof options.maxTimeMS !== 'number') delete options.maxTimeMS;\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new indexes_1.CreateIndexesOperation(this, this.collectionName, indexSpecs, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  dropIndex(indexName, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = (0, utils_1.resolveOptions)(this, options); // Run only against primary\n\n    options.readPreference = read_preference_1.ReadPreference.primary;\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new indexes_1.DropIndexOperation(this, indexName, options), callback);\n  }\n\n  dropIndexes(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new indexes_1.DropIndexesOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /**\n   * Get the list of all indexes information for the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n\n\n  listIndexes(options) {\n    return new indexes_1.ListIndexesCursor(this, (0, utils_1.resolveOptions)(this, options));\n  }\n\n  indexExists(indexes, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new indexes_1.IndexExistsOperation(this, indexes, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  indexInformation(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new indexes_1.IndexInformationOperation(this.s.db, this.collectionName, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  estimatedDocumentCount(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new estimated_document_count_1.EstimatedDocumentCountOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  countDocuments(filter, options, callback) {\n    if (filter == null) {\n      filter = {}, options = {}, callback = undefined;\n    } else if (typeof filter === 'function') {\n      callback = filter, filter = {}, options = {};\n    } else {\n      if (arguments.length === 2) {\n        if (typeof options === 'function') callback = options, options = {};\n      }\n    }\n\n    filter !== null && filter !== void 0 ? filter : filter = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new count_documents_1.CountDocumentsOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  } // Implementation\n\n\n  distinct(key, filter, options, callback) {\n    if (typeof filter === 'function') {\n      callback = filter, filter = {}, options = {};\n    } else {\n      if (arguments.length === 3 && typeof options === 'function') {\n        callback = options, options = {};\n      }\n    }\n\n    filter !== null && filter !== void 0 ? filter : filter = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new distinct_1.DistinctOperation(this, key, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  indexes(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new indexes_1.IndexesOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  stats(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new stats_1.CollStatsOperation(this, options), callback);\n  }\n\n  findOneAndDelete(filter, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new find_and_modify_1.FindOneAndDeleteOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  findOneAndReplace(filter, replacement, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new find_and_modify_1.FindOneAndReplaceOperation(this, filter, replacement, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  findOneAndUpdate(filter, update, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new find_and_modify_1.FindOneAndUpdateOperation(this, filter, update, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /**\n   * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n   *\n   * @param pipeline - An array of aggregation pipelines to execute\n   * @param options - Optional settings for the command\n   */\n\n\n  aggregate() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (arguments.length > 2) {\n      throw new error_1.MongoInvalidArgumentError('Method \"collection.aggregate()\" accepts at most two arguments');\n    }\n\n    if (!Array.isArray(pipeline)) {\n      throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must be an array of aggregation stages');\n    }\n\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new aggregation_cursor_1.AggregationCursor((0, utils_2.getTopology)(this), this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n   *\n   * @since 3.0.0\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   */\n\n\n  watch() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n\n  mapReduce(map, reduce, options, callback) {\n    (0, utils_1.emitWarningOnce)('collection.mapReduce is deprecated. Use the aggregation pipeline instead. Visit https://docs.mongodb.com/manual/reference/map-reduce-to-aggregation-pipeline for more information on how to translate map-reduce operations to the aggregation pipeline.');\n    if ('function' === typeof options) callback = options, options = {}; // Out must always be defined (make sure we don't break weirdly on pre 1.8+ servers)\n    // TODO NODE-3339: Figure out if this is still necessary given we no longer officially support pre-1.8\n\n    if ((options === null || options === void 0 ? void 0 : options.out) == null) {\n      throw new error_1.MongoInvalidArgumentError('Option \"out\" must be defined, see mongodb docs for possible values');\n    }\n\n    if ('function' === typeof map) {\n      map = map.toString();\n    }\n\n    if ('function' === typeof reduce) {\n      reduce = reduce.toString();\n    }\n\n    if ('function' === typeof options.finalize) {\n      options.finalize = options.finalize.toString();\n    }\n\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new map_reduce_1.MapReduceOperation(this, map, reduce, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /** Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order. */\n\n\n  initializeUnorderedBulkOp(options) {\n    return new unordered_1.UnorderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types. */\n\n\n  initializeOrderedBulkOp(options) {\n    return new ordered_1.OrderedBulkOperation(this, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Get the db scoped logger */\n\n\n  getLogger() {\n    return this.s.db.s.logger;\n  }\n\n  get logger() {\n    return this.s.db.s.logger;\n  }\n  /**\n   * Inserts a single document or a an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @deprecated Use insertOne, insertMany or bulkWrite instead.\n   * @param docs - The documents to insert\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n\n\n  insert(docs, options, callback) {\n    (0, utils_1.emitWarningOnce)('collection.insert is deprecated. Use insertOne, insertMany or bulkWrite instead.');\n    if (typeof options === 'function') callback = options, options = {};\n    options = options || {\n      ordered: false\n    };\n    docs = !Array.isArray(docs) ? [docs] : docs;\n\n    if (options.keepGoing === true) {\n      options.ordered = false;\n    }\n\n    return this.insertMany(docs, options, callback);\n  }\n  /**\n   * Updates documents.\n   *\n   * @deprecated use updateOne, updateMany or bulkWrite\n   * @param selector - The selector for the update operation.\n   * @param update - The update operations to be applied to the documents\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n\n\n  update(selector, update, options, callback) {\n    (0, utils_1.emitWarningOnce)('collection.update is deprecated. Use updateOne, updateMany, or bulkWrite instead.');\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.updateMany(selector, update, options, callback);\n  }\n  /**\n   * Remove documents.\n   *\n   * @deprecated use deleteOne, deleteMany or bulkWrite\n   * @param selector - The selector for the update operation.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n\n\n  remove(selector, options, callback) {\n    (0, utils_1.emitWarningOnce)('collection.remove is deprecated. Use deleteOne, deleteMany, or bulkWrite instead.');\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    return this.deleteMany(selector, options, callback);\n  }\n\n  count(filter, options, callback) {\n    if (typeof filter === 'function') {\n      callback = filter, filter = {}, options = {};\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n\n    filter !== null && filter !== void 0 ? filter : filter = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_2.getTopology)(this), new count_documents_1.CountDocumentsOperation(this, filter, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n}\n\nexports.Collection = Collection;","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/collection.ts"],"names":[],"mappings":"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","sourcesContent":["import { DEFAULT_PK_FACTORY, emitWarningOnce, resolveOptions } from './utils';\nimport { ReadPreference, ReadPreferenceLike } from './read_preference';\nimport {\n  normalizeHintField,\n  checkCollectionName,\n  MongoDBNamespace,\n  Callback,\n  getTopology\n} from './utils';\nimport { Document, BSONSerializeOptions, resolveBSONOptions } from './bson';\nimport { MongoInvalidArgumentError } from './error';\nimport { UnorderedBulkOperation } from './bulk/unordered';\nimport { OrderedBulkOperation } from './bulk/ordered';\nimport { ChangeStream, ChangeStreamOptions } from './change_stream';\nimport { WriteConcern, WriteConcernOptions } from './write_concern';\nimport { ReadConcern, ReadConcernLike } from './read_concern';\nimport { AggregationCursor } from './cursor/aggregation_cursor';\nimport type { AggregateOptions } from './operations/aggregate';\nimport { BulkWriteOperation } from './operations/bulk_write';\nimport { CountDocumentsOperation, CountDocumentsOptions } from './operations/count_documents';\nimport {\n  CreateIndexesOperation,\n  CreateIndexOperation,\n  DropIndexOperation,\n  DropIndexesOperation,\n  IndexesOperation,\n  IndexExistsOperation,\n  IndexInformationOperation,\n  CreateIndexesOptions,\n  DropIndexesOptions,\n  ListIndexesOptions,\n  IndexSpecification,\n  IndexDescription,\n  ListIndexesCursor\n} from './operations/indexes';\nimport { DistinctOperation, DistinctOptions } from './operations/distinct';\nimport { DropCollectionOperation, DropCollectionOptions } from './operations/drop';\nimport {\n  EstimatedDocumentCountOperation,\n  EstimatedDocumentCountOptions\n} from './operations/estimated_document_count';\nimport type { FindOptions } from './operations/find';\nimport {\n  FindOneAndDeleteOperation,\n  FindOneAndReplaceOperation,\n  FindOneAndUpdateOperation,\n  FindOneAndDeleteOptions,\n  FindOneAndReplaceOptions,\n  FindOneAndUpdateOptions\n} from './operations/find_and_modify';\nimport {\n  InsertOneOperation,\n  InsertOneOptions,\n  InsertOneResult,\n  InsertManyOperation,\n  InsertManyResult\n} from './operations/insert';\nimport {\n  UpdateOneOperation,\n  UpdateManyOperation,\n  UpdateOptions,\n  UpdateResult,\n  ReplaceOneOperation,\n  ReplaceOptions\n} from './operations/update';\nimport {\n  DeleteOneOperation,\n  DeleteManyOperation,\n  DeleteOptions,\n  DeleteResult\n} from './operations/delete';\nimport { IsCappedOperation } from './operations/is_capped';\nimport {\n  MapReduceOperation,\n  MapFunction,\n  ReduceFunction,\n  MapReduceOptions\n} from './operations/map_reduce';\nimport { OptionsOperation } from './operations/options_operation';\nimport { RenameOperation, RenameOptions } from './operations/rename';\nimport { CollStats, CollStatsOperation, CollStatsOptions } from './operations/stats';\nimport { executeOperation } from './operations/execute_operation';\nimport type { Db } from './db';\nimport type { OperationOptions, Hint } from './operations/operation';\nimport type { IndexInformationOptions } from './operations/common_functions';\nimport type { BulkWriteResult, BulkWriteOptions, AnyBulkWriteOperation } from './bulk/common';\nimport type { PkFactory } from './mongo_client';\nimport type { Logger, LoggerOptions } from './logger';\nimport { FindCursor } from './cursor/find_cursor';\nimport type { CountOptions } from './operations/count';\nimport type {\n  Filter,\n  TODO_NODE_3286,\n  UpdateFilter,\n  WithId,\n  WithoutId,\n  OptionalId,\n  Flatten\n} from './mongo_types';\n\n/** @public */\nexport interface ModifyResult<TSchema = Document> {\n  value: TSchema | null;\n  lastErrorObject?: Document;\n  ok: 0 | 1;\n}\n\n/** @public */\nexport interface CollectionOptions\n  extends BSONSerializeOptions,\n    WriteConcernOptions,\n    LoggerOptions {\n  slaveOk?: boolean;\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcernLike;\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n  readPreference?: ReadPreferenceLike;\n}\n\n/** @internal */\nexport interface CollectionPrivate {\n  pkFactory: PkFactory;\n  db: Db;\n  options: any;\n  namespace: MongoDBNamespace;\n  readPreference?: ReadPreference;\n  bsonOptions: BSONSerializeOptions;\n  slaveOk?: boolean;\n  collectionHint?: Hint;\n  readConcern?: ReadConcern;\n  writeConcern?: WriteConcern;\n}\n\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/update/remove/find and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```js\n * const MongoClient = require('mongodb').MongoClient;\n * const test = require('assert');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Create a collection we want to drop later\n *   const col = client.db(dbName).collection('createIndexExample1');\n *   // Show that duplicate records got dropped\n *   col.find({}).toArray(function(err, items) {\n *     expect(err).to.not.exist;\n *     test.equal(4, items.length);\n *     client.close();\n *   });\n * });\n * ```\n */\nexport class Collection<TSchema extends Document = Document> {\n  /** @internal */\n  s: CollectionPrivate;\n\n  /**\n   * Create a new Collection instance\n   * @internal\n   */\n  constructor(db: Db, name: string, options?: CollectionOptions) {\n    checkCollectionName(name);\n\n    // Internal state\n    this.s = {\n      db,\n      options,\n      namespace: new MongoDBNamespace(db.databaseName, name),\n      pkFactory: db.options?.pkFactory ?? DEFAULT_PK_FACTORY,\n      readPreference: ReadPreference.fromOptions(options),\n      bsonOptions: resolveBSONOptions(options, db),\n      readConcern: ReadConcern.fromOptions(options),\n      writeConcern: WriteConcern.fromOptions(options),\n      slaveOk: options == null || options.slaveOk == null ? db.slaveOk : options.slaveOk\n    };\n  }\n\n  /**\n   * The name of the database this collection belongs to\n   */\n  get dbName(): string {\n    return this.s.namespace.db;\n  }\n\n  /**\n   * The name of this collection\n   */\n  get collectionName(): string {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.s.namespace.collection!;\n  }\n\n  /**\n   * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n   */\n  get namespace(): string {\n    return this.s.namespace.toString();\n  }\n\n  /**\n   * The current readConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get readConcern(): ReadConcern | undefined {\n    if (this.s.readConcern == null) {\n      return this.s.db.readConcern;\n    }\n    return this.s.readConcern;\n  }\n\n  /**\n   * The current readPreference of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get readPreference(): ReadPreference | undefined {\n    if (this.s.readPreference == null) {\n      return this.s.db.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  /**\n   * The current writeConcern of the collection. If not explicitly defined for\n   * this collection, will be inherited from the parent DB\n   */\n  get writeConcern(): WriteConcern | undefined {\n    if (this.s.writeConcern == null) {\n      return this.s.db.writeConcern;\n    }\n    return this.s.writeConcern;\n  }\n\n  /** The current index hint for the collection */\n  get hint(): Hint | undefined {\n    return this.s.collectionHint;\n  }\n\n  set hint(v: Hint | undefined) {\n    this.s.collectionHint = normalizeHintField(v);\n  }\n\n  /**\n   * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param doc - The document to insert\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  insertOne(doc: OptionalId<TSchema>): Promise<InsertOneResult<TSchema>>;\n  insertOne(doc: OptionalId<TSchema>, callback: Callback<InsertOneResult<TSchema>>): void;\n  insertOne(doc: OptionalId<TSchema>, options: InsertOneOptions): Promise<InsertOneResult<TSchema>>;\n  insertOne(\n    doc: OptionalId<TSchema>,\n    options: InsertOneOptions,\n    callback: Callback<InsertOneResult<TSchema>>\n  ): void;\n  insertOne(\n    doc: OptionalId<TSchema>,\n    options?: InsertOneOptions | Callback<InsertOneResult<TSchema>>,\n    callback?: Callback<InsertOneResult<TSchema>>\n  ): Promise<InsertOneResult<TSchema>> | void {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    // CSFLE passes in { w: 'majority' } to ensure the lib works in both 3.x and 4.x\n    // we support that option style here only\n    if (options && Reflect.get(options, 'w')) {\n      options.writeConcern = WriteConcern.fromOptions(Reflect.get(options, 'w'));\n    }\n\n    return executeOperation(\n      getTopology(this),\n      new InsertOneOperation(\n        this as TODO_NODE_3286,\n        doc,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param docs - The documents to insert\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  insertMany(docs: OptionalId<TSchema>[]): Promise<InsertManyResult<TSchema>>;\n  insertMany(docs: OptionalId<TSchema>[], callback: Callback<InsertManyResult<TSchema>>): void;\n  insertMany(\n    docs: OptionalId<TSchema>[],\n    options: BulkWriteOptions\n  ): Promise<InsertManyResult<TSchema>>;\n  insertMany(\n    docs: OptionalId<TSchema>[],\n    options: BulkWriteOptions,\n    callback: Callback<InsertManyResult<TSchema>>\n  ): void;\n  insertMany(\n    docs: OptionalId<TSchema>[],\n    options?: BulkWriteOptions | Callback<InsertManyResult<TSchema>>,\n    callback?: Callback<InsertManyResult<TSchema>>\n  ): Promise<InsertManyResult<TSchema>> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ? Object.assign({}, options) : { ordered: true };\n\n    return executeOperation(\n      getTopology(this),\n      new InsertManyOperation(\n        this as TODO_NODE_3286,\n        docs,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Perform a bulkWrite operation without a fluent API\n   *\n   * Legal operation types are\n   *\n   * ```js\n   *  { insertOne: { document: { a: 1 } } }\n   *\n   *  { updateOne: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }\n   *\n   *  { updateMany: { filter: {a:2}, update: {$set: {a:2}}, upsert:true } }\n   *\n   *  { updateMany: { filter: {}, update: {$set: {\"a.$[i].x\": 5}}, arrayFilters: [{ \"i.x\": 5 }]} }\n   *\n   *  { deleteOne: { filter: {c:1} } }\n   *\n   *  { deleteMany: { filter: {c:1} } }\n   *\n   *  { replaceOne: { filter: {c:3}, replacement: {c:4}, upsert:true} }\n   *```\n   * Please note that raw operations are no longer accepted as of driver version 4.0.\n   *\n   * If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @param operations - Bulk operations to perform\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   * @throws MongoDriverError if operations is not an array\n   */\n  bulkWrite(operations: AnyBulkWriteOperation<TSchema>[]): Promise<BulkWriteResult>;\n  bulkWrite(\n    operations: AnyBulkWriteOperation<TSchema>[],\n    callback: Callback<BulkWriteResult>\n  ): void;\n  bulkWrite(\n    operations: AnyBulkWriteOperation<TSchema>[],\n    options: BulkWriteOptions\n  ): Promise<BulkWriteResult>;\n  bulkWrite(\n    operations: AnyBulkWriteOperation<TSchema>[],\n    options: BulkWriteOptions,\n    callback: Callback<BulkWriteResult>\n  ): void;\n  bulkWrite(\n    operations: AnyBulkWriteOperation<TSchema>[],\n    options?: BulkWriteOptions | Callback<BulkWriteResult>,\n    callback?: Callback<BulkWriteResult>\n  ): Promise<BulkWriteResult> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || { ordered: true };\n\n    if (!Array.isArray(operations)) {\n      throw new MongoInvalidArgumentError('Argument \"operations\" must be an array of documents');\n    }\n\n    return executeOperation(\n      getTopology(this),\n      new BulkWriteOperation(\n        this as TODO_NODE_3286,\n        operations as TODO_NODE_3286,\n        resolveOptions(this, options)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Update a single document in a collection\n   *\n   * @param filter - The filter used to select the document to update\n   * @param update - The update operations to be applied to the document\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  updateOne(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema> | Partial<TSchema>\n  ): Promise<UpdateResult>;\n  updateOne(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\n    callback: Callback<UpdateResult>\n  ): void;\n  updateOne(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\n    options: UpdateOptions\n  ): Promise<UpdateResult>;\n  updateOne(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\n    options: UpdateOptions,\n    callback: Callback<UpdateResult>\n  ): void;\n  updateOne(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema> | Partial<TSchema>,\n    options?: UpdateOptions | Callback<UpdateResult>,\n    callback?: Callback<UpdateResult>\n  ): Promise<UpdateResult> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new UpdateOneOperation(\n        this as TODO_NODE_3286,\n        filter,\n        update,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Replace a document in a collection with another document\n   *\n   * @param filter - The filter used to select the document to replace\n   * @param replacement - The Document that replaces the matching document\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  replaceOne(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>\n  ): Promise<UpdateResult | Document>;\n  replaceOne(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    callback: Callback<UpdateResult | Document>\n  ): void;\n  replaceOne(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options: ReplaceOptions\n  ): Promise<UpdateResult | Document>;\n  replaceOne(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options: ReplaceOptions,\n    callback: Callback<UpdateResult | Document>\n  ): void;\n  replaceOne(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options?: ReplaceOptions | Callback<UpdateResult | Document>,\n    callback?: Callback<UpdateResult | Document>\n  ): Promise<UpdateResult | Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new ReplaceOneOperation(\n        this as TODO_NODE_3286,\n        filter,\n        replacement,\n        resolveOptions(this, options)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Update multiple documents in a collection\n   *\n   * @param filter - The filter used to select the documents to update\n   * @param update - The update operations to be applied to the documents\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  updateMany(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>\n  ): Promise<UpdateResult | Document>;\n  updateMany(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    callback: Callback<UpdateResult | Document>\n  ): void;\n  updateMany(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: UpdateOptions\n  ): Promise<UpdateResult | Document>;\n  updateMany(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: UpdateOptions,\n    callback: Callback<UpdateResult | Document>\n  ): void;\n  updateMany(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options?: UpdateOptions | Callback<UpdateResult | Document>,\n    callback?: Callback<UpdateResult | Document>\n  ): Promise<UpdateResult | Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new UpdateManyOperation(\n        this as TODO_NODE_3286,\n        filter,\n        update,\n        resolveOptions(this, options)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Delete a document from a collection\n   *\n   * @param filter - The filter used to select the document to remove\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  deleteOne(filter: Filter<TSchema>): Promise<DeleteResult>;\n  deleteOne(filter: Filter<TSchema>, callback: Callback<DeleteResult>): void;\n  deleteOne(filter: Filter<TSchema>, options: DeleteOptions): Promise<DeleteResult>;\n  deleteOne(\n    filter: Filter<TSchema>,\n    options: DeleteOptions,\n    callback?: Callback<DeleteResult>\n  ): void;\n  deleteOne(\n    filter: Filter<TSchema>,\n    options?: DeleteOptions | Callback<DeleteResult>,\n    callback?: Callback<DeleteResult>\n  ): Promise<DeleteResult> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new DeleteOneOperation(this as TODO_NODE_3286, filter, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Delete multiple documents from a collection\n   *\n   * @param filter - The filter used to select the documents to remove\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  deleteMany(filter: Filter<TSchema>): Promise<DeleteResult>;\n  deleteMany(filter: Filter<TSchema>, callback: Callback<DeleteResult>): void;\n  deleteMany(filter: Filter<TSchema>, options: DeleteOptions): Promise<DeleteResult>;\n  deleteMany(\n    filter: Filter<TSchema>,\n    options: DeleteOptions,\n    callback: Callback<DeleteResult>\n  ): void;\n  deleteMany(\n    filter: Filter<TSchema>,\n    options?: DeleteOptions | Callback<DeleteResult>,\n    callback?: Callback<DeleteResult>\n  ): Promise<DeleteResult> | void {\n    if (filter == null) {\n      filter = {};\n      options = {};\n      callback = undefined;\n    } else if (typeof filter === 'function') {\n      callback = filter as Callback<DeleteResult>;\n      filter = {};\n      options = {};\n    } else if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return executeOperation(\n      getTopology(this),\n      new DeleteManyOperation(this as TODO_NODE_3286, filter, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Rename the collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the Db or MongoClient.\n   *\n   * @param newName - New name of of the collection.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  rename(newName: string): Promise<Collection>;\n  rename(newName: string, callback: Callback<Collection>): void;\n  rename(newName: string, options: RenameOptions): Promise<Collection>;\n  rename(newName: string, options: RenameOptions, callback: Callback<Collection>): void;\n  rename(\n    newName: string,\n    options?: RenameOptions | Callback<Collection>,\n    callback?: Callback<Collection>\n  ): Promise<Collection> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    // Intentionally, we do not inherit options from parent for this operation.\n    return executeOperation(\n      getTopology(this),\n      new RenameOperation(this as TODO_NODE_3286, newName, {\n        ...options,\n        readPreference: ReadPreference.PRIMARY\n      }),\n      callback\n    );\n  }\n\n  /**\n   * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  drop(): Promise<boolean>;\n  drop(callback: Callback<boolean>): void;\n  drop(options: DropCollectionOptions): Promise<boolean>;\n  drop(options: DropCollectionOptions, callback: Callback<boolean>): void;\n  drop(\n    options?: DropCollectionOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return executeOperation(\n      getTopology(this),\n      new DropCollectionOperation(this.s.db, this.collectionName, options),\n      callback\n    );\n  }\n\n  /**\n   * Fetches the first document that matches the filter\n   *\n   * @param filter - Query for find Operation\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  findOne(): Promise<WithId<TSchema> | null>;\n  findOne(callback: Callback<WithId<TSchema> | null>): void;\n  findOne(filter: Filter<TSchema>): Promise<WithId<TSchema> | null>;\n  findOne(filter: Filter<TSchema>, callback: Callback<WithId<TSchema> | null>): void;\n  findOne(filter: Filter<TSchema>, options: FindOptions): Promise<WithId<TSchema> | null>;\n  findOne(\n    filter: Filter<TSchema>,\n    options: FindOptions,\n    callback: Callback<WithId<TSchema> | null>\n  ): void;\n\n  // allow an override of the schema.\n  findOne<T = TSchema>(): Promise<T | null>;\n  findOne<T = TSchema>(callback: Callback<T | null>): void;\n  findOne<T = TSchema>(filter: Filter<TSchema>): Promise<T | null>;\n  findOne<T = TSchema>(filter: Filter<TSchema>, options?: FindOptions): Promise<T | null>;\n  findOne<T = TSchema>(\n    filter: Filter<TSchema>,\n    options?: FindOptions,\n    callback?: Callback<T | null>\n  ): void;\n\n  findOne(\n    filter?: Filter<TSchema> | Callback<WithId<TSchema> | null>,\n    options?: FindOptions | Callback<WithId<TSchema> | null>,\n    callback?: Callback<WithId<TSchema> | null>\n  ): Promise<WithId<TSchema> | null> | void {\n    if (callback != null && typeof callback !== 'function') {\n      throw new MongoInvalidArgumentError(\n        'Third parameter to `findOne()` must be a callback or undefined'\n      );\n    }\n\n    if (typeof filter === 'function') {\n      callback = filter as Callback<WithId<TSchema> | null>;\n      filter = {};\n      options = {};\n    }\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    const finalFilter = filter ?? {};\n    const finalOptions = options ?? {};\n    return this.find(finalFilter, finalOptions).limit(-1).batchSize(1).next(callback);\n  }\n\n  /**\n   * Creates a cursor for a filter that can be used to iterate over results from MongoDB\n   *\n   * @param filter - The filter predicate. If unspecified, then all documents in the collection will match the predicate\n   */\n  find(): FindCursor<WithId<TSchema>>;\n  find(filter: Filter<TSchema>, options?: FindOptions): FindCursor<WithId<TSchema>>;\n  find<T>(filter: Filter<TSchema>, options?: FindOptions): FindCursor<T>;\n  find(filter?: Filter<TSchema>, options?: FindOptions): FindCursor<WithId<TSchema>> {\n    if (arguments.length > 2) {\n      throw new MongoInvalidArgumentError(\n        'Method \"collection.find()\" accepts at most two arguments'\n      );\n    }\n    if (typeof options === 'function') {\n      throw new MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new FindCursor<WithId<TSchema>>(\n      getTopology(this),\n      this.s.namespace,\n      filter,\n      resolveOptions(this as TODO_NODE_3286, options)\n    );\n  }\n\n  /**\n   * Returns the options of the collection.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  options(): Promise<Document>;\n  options(callback: Callback<Document>): void;\n  options(options: OperationOptions): Promise<Document>;\n  options(options: OperationOptions, callback: Callback<Document>): void;\n  options(\n    options?: OperationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new OptionsOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Returns if the collection is a capped collection\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  isCapped(): Promise<boolean>;\n  isCapped(callback: Callback<boolean>): void;\n  isCapped(options: OperationOptions): Promise<boolean>;\n  isCapped(options: OperationOptions, callback: Callback<boolean>): void;\n  isCapped(\n    options?: OperationOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new IsCappedOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Creates an index on the db and collection collection.\n   *\n   * @param indexSpec - The field name or index specification to create an index for\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   *\n   * @example\n   * ```js\n   * const collection = client.db('foo').collection('bar');\n   *\n   * await collection.createIndex({ a: 1, b: -1 });\n   *\n   * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n   * await collection.createIndex([ [c, 1], [d, -1] ]);\n   *\n   * // Equivalent to { e: 1 }\n   * await collection.createIndex('e');\n   *\n   * // Equivalent to { f: 1, g: 1 }\n   * await collection.createIndex(['f', 'g'])\n   *\n   * // Equivalent to { h: 1, i: -1 }\n   * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n   *\n   * // Equivalent to { j: 1, k: -1, l: 2d }\n   * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n   * ```\n   */\n  createIndex(indexSpec: IndexSpecification): Promise<string>;\n  createIndex(indexSpec: IndexSpecification, callback: Callback<string>): void;\n  createIndex(indexSpec: IndexSpecification, options: CreateIndexesOptions): Promise<string>;\n  createIndex(\n    indexSpec: IndexSpecification,\n    options: CreateIndexesOptions,\n    callback: Callback<string>\n  ): void;\n  createIndex(\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions | Callback<string>,\n    callback?: Callback<string>\n  ): Promise<string> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new CreateIndexOperation(\n        this as TODO_NODE_3286,\n        this.collectionName,\n        indexSpec,\n        resolveOptions(this, options)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Creates multiple indexes in the collection, this method is only supported for\n   * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n   * error.\n   *\n   * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n   * Index specifications are defined {@link http://docs.mongodb.org/manual/reference/command/createIndexes/| here}.\n   *\n   * @param indexSpecs - An array of index specifications to be created\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   *\n   * @example\n   * ```js\n   * const collection = client.db('foo').collection('bar');\n   * await collection.createIndexes([\n   *   // Simple index on field fizz\n   *   {\n   *     key: { fizz: 1 },\n   *   }\n   *   // wildcard index\n   *   {\n   *     key: { '$**': 1 }\n   *   },\n   *   // named index on darmok and jalad\n   *   {\n   *     key: { darmok: 1, jalad: -1 }\n   *     name: 'tanagra'\n   *   }\n   * ]);\n   * ```\n   */\n  createIndexes(indexSpecs: IndexDescription[]): Promise<string[]>;\n  createIndexes(indexSpecs: IndexDescription[], callback: Callback<string[]>): void;\n  createIndexes(indexSpecs: IndexDescription[], options: CreateIndexesOptions): Promise<string[]>;\n  createIndexes(\n    indexSpecs: IndexDescription[],\n    options: CreateIndexesOptions,\n    callback: Callback<string[]>\n  ): void;\n  createIndexes(\n    indexSpecs: IndexDescription[],\n    options?: CreateIndexesOptions | Callback<string[]>,\n    callback?: Callback<string[]>\n  ): Promise<string[]> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ? Object.assign({}, options) : {};\n    if (typeof options.maxTimeMS !== 'number') delete options.maxTimeMS;\n\n    return executeOperation(\n      getTopology(this),\n      new CreateIndexesOperation(\n        this as TODO_NODE_3286,\n        this.collectionName,\n        indexSpecs,\n        resolveOptions(this, options)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Drops an index from this collection.\n   *\n   * @param indexName - Name of the index to drop.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  dropIndex(indexName: string): Promise<Document>;\n  dropIndex(indexName: string, callback: Callback<Document>): void;\n  dropIndex(indexName: string, options: DropIndexesOptions): Promise<Document>;\n  dropIndex(indexName: string, options: DropIndexesOptions, callback: Callback<Document>): void;\n  dropIndex(\n    indexName: string,\n    options?: DropIndexesOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = resolveOptions(this, options);\n\n    // Run only against primary\n    options.readPreference = ReadPreference.primary;\n\n    return executeOperation(\n      getTopology(this),\n      new DropIndexOperation(this as TODO_NODE_3286, indexName, options),\n      callback\n    );\n  }\n\n  /**\n   * Drops all indexes from this collection.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  dropIndexes(): Promise<Document>;\n  dropIndexes(callback: Callback<Document>): void;\n  dropIndexes(options: DropIndexesOptions): Promise<Document>;\n  dropIndexes(options: DropIndexesOptions, callback: Callback<Document>): void;\n  dropIndexes(\n    options?: DropIndexesOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new DropIndexesOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Get the list of all indexes information for the collection.\n   *\n   * @param options - Optional settings for the command\n   */\n  listIndexes(options?: ListIndexesOptions): ListIndexesCursor {\n    return new ListIndexesCursor(this as TODO_NODE_3286, resolveOptions(this, options));\n  }\n\n  /**\n   * Checks if one or more indexes exist on the collection, fails on first non-existing index\n   *\n   * @param indexes - One or more index names to check.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  indexExists(indexes: string | string[]): Promise<boolean>;\n  indexExists(indexes: string | string[], callback: Callback<boolean>): void;\n  indexExists(indexes: string | string[], options: IndexInformationOptions): Promise<boolean>;\n  indexExists(\n    indexes: string | string[],\n    options: IndexInformationOptions,\n    callback: Callback<boolean>\n  ): void;\n  indexExists(\n    indexes: string | string[],\n    options?: IndexInformationOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new IndexExistsOperation(this as TODO_NODE_3286, indexes, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  indexInformation(): Promise<Document>;\n  indexInformation(callback: Callback<Document>): void;\n  indexInformation(options: IndexInformationOptions): Promise<Document>;\n  indexInformation(options: IndexInformationOptions, callback: Callback<Document>): void;\n  indexInformation(\n    options?: IndexInformationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new IndexInformationOperation(this.s.db, this.collectionName, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Gets an estimate of the count of documents in a collection using collection metadata.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  estimatedDocumentCount(): Promise<number>;\n  estimatedDocumentCount(callback: Callback<number>): void;\n  estimatedDocumentCount(options: EstimatedDocumentCountOptions): Promise<number>;\n  estimatedDocumentCount(options: EstimatedDocumentCountOptions, callback: Callback<number>): void;\n  estimatedDocumentCount(\n    options?: EstimatedDocumentCountOptions | Callback<number>,\n    callback?: Callback<number>\n  ): Promise<number> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    return executeOperation(\n      getTopology(this),\n      new EstimatedDocumentCountOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Gets the number of documents matching the filter.\n   * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n   * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n   * the following query operators must be replaced:\n   *\n   * | Operator | Replacement |\n   * | -------- | ----------- |\n   * | `$where`   | [`$expr`][1] |\n   * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n   * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n   *\n   * [1]: https://docs.mongodb.com/manual/reference/operator/query/expr/\n   * [2]: https://docs.mongodb.com/manual/reference/operator/query/geoWithin/\n   * [3]: https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center\n   * [4]: https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n   *\n   * @param filter - The filter for the count\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   *\n   * @see https://docs.mongodb.com/manual/reference/operator/query/expr/\n   * @see https://docs.mongodb.com/manual/reference/operator/query/geoWithin/\n   * @see https://docs.mongodb.com/manual/reference/operator/query/center/#op._S_center\n   * @see https://docs.mongodb.com/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n   */\n  countDocuments(): Promise<number>;\n  countDocuments(callback: Callback<number>): void;\n  countDocuments(filter: Filter<TSchema>): Promise<number>;\n  countDocuments(callback: Callback<number>): void;\n  countDocuments(filter: Filter<TSchema>, options: CountDocumentsOptions): Promise<number>;\n  countDocuments(\n    filter: Filter<TSchema>,\n    options: CountDocumentsOptions,\n    callback: Callback<number>\n  ): void;\n  countDocuments(filter: Filter<TSchema>, callback: Callback<number>): void;\n  countDocuments(\n    filter?: Document | CountDocumentsOptions | Callback<number>,\n    options?: CountDocumentsOptions | Callback<number>,\n    callback?: Callback<number>\n  ): Promise<number> | void {\n    if (filter == null) {\n      (filter = {}), (options = {}), (callback = undefined);\n    } else if (typeof filter === 'function') {\n      (callback = filter as Callback<number>), (filter = {}), (options = {});\n    } else {\n      if (arguments.length === 2) {\n        if (typeof options === 'function') (callback = options), (options = {});\n      }\n    }\n\n    filter ??= {};\n    return executeOperation(\n      getTopology(this),\n      new CountDocumentsOperation(\n        this as TODO_NODE_3286,\n        filter as Document,\n        resolveOptions(this, options as CountDocumentsOptions)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * The distinct command returns a list of distinct values for the given key across a collection.\n   *\n   * @param key - Field of the document to find distinct values for\n   * @param filter - The filter for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key\n  ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    callback: Callback<Array<Flatten<WithId<TSchema>[Key]>>>\n  ): void;\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter: Filter<TSchema>\n  ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter: Filter<TSchema>,\n    callback: Callback<Array<Flatten<WithId<TSchema>[Key]>>>\n  ): void;\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter: Filter<TSchema>,\n    options: DistinctOptions\n  ): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter: Filter<TSchema>,\n    options: DistinctOptions,\n    callback: Callback<Array<Flatten<WithId<TSchema>[Key]>>>\n  ): void;\n\n  // Embedded documents overload\n  distinct(key: string): Promise<any[]>;\n  distinct(key: string, callback: Callback<any[]>): void;\n  distinct(key: string, filter: Filter<TSchema>): Promise<any[]>;\n  distinct(key: string, filter: Filter<TSchema>, callback: Callback<any[]>): void;\n  distinct(key: string, filter: Filter<TSchema>, options: DistinctOptions): Promise<any[]>;\n  distinct(\n    key: string,\n    filter: Filter<TSchema>,\n    options: DistinctOptions,\n    callback: Callback<any[]>\n  ): void;\n  // Implementation\n  distinct<Key extends keyof WithId<TSchema>>(\n    key: Key,\n    filter?: Filter<TSchema> | DistinctOptions | Callback<any[]>,\n    options?: DistinctOptions | Callback<any[]>,\n    callback?: Callback<any[]>\n  ): Promise<any[]> | void {\n    if (typeof filter === 'function') {\n      (callback = filter as Callback<any[]>), (filter = {}), (options = {});\n    } else {\n      if (arguments.length === 3 && typeof options === 'function') {\n        (callback = options), (options = {});\n      }\n    }\n\n    filter ??= {};\n    return executeOperation(\n      getTopology(this),\n      new DistinctOperation(\n        this as TODO_NODE_3286,\n        key as TODO_NODE_3286,\n        filter,\n        resolveOptions(this, options as DistinctOptions)\n      ),\n      callback\n    );\n  }\n\n  /**\n   * Retrieve all the indexes on the collection.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  indexes(): Promise<Document[]>;\n  indexes(callback: Callback<Document[]>): void;\n  indexes(options: IndexInformationOptions): Promise<Document[]>;\n  indexes(options: IndexInformationOptions, callback: Callback<Document[]>): void;\n  indexes(\n    options?: IndexInformationOptions | Callback<Document[]>,\n    callback?: Callback<Document[]>\n  ): Promise<Document[]> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new IndexesOperation(this as TODO_NODE_3286, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Get all the collection statistics.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  stats(): Promise<CollStats>;\n  stats(callback: Callback<CollStats>): void;\n  stats(options: CollStatsOptions): Promise<CollStats>;\n  stats(options: CollStatsOptions, callback: Callback<CollStats>): void;\n  stats(\n    options?: CollStatsOptions | Callback<CollStats>,\n    callback?: Callback<CollStats>\n  ): Promise<CollStats> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return executeOperation(\n      getTopology(this),\n      new CollStatsOperation(this as TODO_NODE_3286, options),\n      callback\n    );\n  }\n\n  /**\n   * Find a document and delete it in one atomic operation. Requires a write lock for the duration of the operation.\n   *\n   * @param filter - The filter used to select the document to remove\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  findOneAndDelete(filter: Filter<TSchema>): Promise<ModifyResult<TSchema>>;\n  findOneAndDelete(\n    filter: Filter<TSchema>,\n    options: FindOneAndDeleteOptions\n  ): Promise<ModifyResult<TSchema>>;\n  findOneAndDelete(filter: Filter<TSchema>, callback: Callback<ModifyResult<TSchema>>): void;\n  findOneAndDelete(\n    filter: Filter<TSchema>,\n    options: FindOneAndDeleteOptions,\n    callback: Callback<ModifyResult<TSchema>>\n  ): void;\n  findOneAndDelete(\n    filter: Filter<TSchema>,\n    options?: FindOneAndDeleteOptions | Callback<ModifyResult<TSchema>>,\n    callback?: Callback<ModifyResult<TSchema>>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new FindOneAndDeleteOperation(\n        this as TODO_NODE_3286,\n        filter,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Find a document and replace it in one atomic operation. Requires a write lock for the duration of the operation.\n   *\n   * @param filter - The filter used to select the document to replace\n   * @param replacement - The Document that replaces the matching document\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>\n  ): Promise<ModifyResult<TSchema>>;\n  findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    callback: Callback<ModifyResult<TSchema>>\n  ): void;\n  findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options: FindOneAndReplaceOptions\n  ): Promise<ModifyResult<TSchema>>;\n  findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options: FindOneAndReplaceOptions,\n    callback: Callback<ModifyResult<TSchema>>\n  ): void;\n  findOneAndReplace(\n    filter: Filter<TSchema>,\n    replacement: WithoutId<TSchema>,\n    options?: FindOneAndReplaceOptions | Callback<ModifyResult<TSchema>>,\n    callback?: Callback<ModifyResult<TSchema>>\n  ): Promise<ModifyResult<TSchema>> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new FindOneAndReplaceOperation(\n        this as TODO_NODE_3286,\n        filter,\n        replacement,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.\n   *\n   * @param filter - The filter used to select the document to update\n   * @param update - Update operations to be performed on the document\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>\n  ): Promise<ModifyResult<TSchema>>;\n  findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    callback: Callback<ModifyResult<TSchema>>\n  ): void;\n  findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: FindOneAndUpdateOptions\n  ): Promise<ModifyResult<TSchema>>;\n  findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: FindOneAndUpdateOptions,\n    callback: Callback<ModifyResult<TSchema>>\n  ): void;\n  findOneAndUpdate(\n    filter: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options?: FindOneAndUpdateOptions | Callback<ModifyResult<TSchema>>,\n    callback?: Callback<ModifyResult<TSchema>>\n  ): Promise<ModifyResult<TSchema>> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new FindOneAndUpdateOperation(\n        this as TODO_NODE_3286,\n        filter,\n        update,\n        resolveOptions(this, options)\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n   *\n   * @param pipeline - An array of aggregation pipelines to execute\n   * @param options - Optional settings for the command\n   */\n  aggregate<T = Document>(\n    pipeline: Document[] = [],\n    options?: AggregateOptions\n  ): AggregationCursor<T> {\n    if (arguments.length > 2) {\n      throw new MongoInvalidArgumentError(\n        'Method \"collection.aggregate()\" accepts at most two arguments'\n      );\n    }\n    if (!Array.isArray(pipeline)) {\n      throw new MongoInvalidArgumentError(\n        'Argument \"pipeline\" must be an array of aggregation stages'\n      );\n    }\n    if (typeof options === 'function') {\n      throw new MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new AggregationCursor(\n      getTopology(this),\n      this.s.namespace,\n      pipeline,\n      resolveOptions(this, options)\n    );\n  }\n\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n   *\n   * @since 3.0.0\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   */\n  watch<TLocal = TSchema>(\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ): ChangeStream<TLocal> {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new ChangeStream<TLocal>(this, pipeline, resolveOptions(this, options));\n  }\n\n  /**\n   * Run Map Reduce across a collection. Be aware that the inline option for out will return an array of results not a collection.\n   *\n   * @deprecated collection.mapReduce is deprecated. Use the aggregation pipeline instead. Visit https://docs.mongodb.com/manual/reference/map-reduce-to-aggregation-pipeline for more information on how to translate map-reduce operations to the aggregation pipeline.\n   * @param map - The mapping function.\n   * @param reduce - The reduce function.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  mapReduce<TKey = any, TValue = any>(\n    map: string | MapFunction<TSchema>,\n    reduce: string | ReduceFunction<TKey, TValue>\n  ): Promise<Document | Document[]>;\n  mapReduce<TKey = any, TValue = any>(\n    map: string | MapFunction<TSchema>,\n    reduce: string | ReduceFunction<TKey, TValue>,\n    callback: Callback<Document | Document[]>\n  ): void;\n  mapReduce<TKey = any, TValue = any>(\n    map: string | MapFunction<TSchema>,\n    reduce: string | ReduceFunction<TKey, TValue>,\n    options: MapReduceOptions<TKey, TValue>\n  ): Promise<Document | Document[]>;\n  mapReduce<TKey = any, TValue = any>(\n    map: string | MapFunction<TSchema>,\n    reduce: string | ReduceFunction<TKey, TValue>,\n    options: MapReduceOptions<TKey, TValue>,\n    callback: Callback<Document | Document[]>\n  ): void;\n  mapReduce<TKey = any, TValue = any>(\n    map: string | MapFunction<TSchema>,\n    reduce: string | ReduceFunction<TKey, TValue>,\n    options?: MapReduceOptions<TKey, TValue> | Callback<Document | Document[]>,\n    callback?: Callback<Document | Document[]>\n  ): Promise<Document | Document[]> | void {\n    emitWarningOnce(\n      'collection.mapReduce is deprecated. Use the aggregation pipeline instead. Visit https://docs.mongodb.com/manual/reference/map-reduce-to-aggregation-pipeline for more information on how to translate map-reduce operations to the aggregation pipeline.'\n    );\n    if ('function' === typeof options) (callback = options), (options = {});\n    // Out must always be defined (make sure we don't break weirdly on pre 1.8+ servers)\n    // TODO NODE-3339: Figure out if this is still necessary given we no longer officially support pre-1.8\n    if (options?.out == null) {\n      throw new MongoInvalidArgumentError(\n        'Option \"out\" must be defined, see mongodb docs for possible values'\n      );\n    }\n\n    if ('function' === typeof map) {\n      map = map.toString();\n    }\n\n    if ('function' === typeof reduce) {\n      reduce = reduce.toString();\n    }\n\n    if ('function' === typeof options.finalize) {\n      options.finalize = options.finalize.toString();\n    }\n\n    return executeOperation(\n      getTopology(this),\n      new MapReduceOperation(\n        this as TODO_NODE_3286,\n        map,\n        reduce,\n        resolveOptions(this, options) as TODO_NODE_3286\n      ),\n      callback\n    );\n  }\n\n  /** Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order. */\n  initializeUnorderedBulkOp(options?: BulkWriteOptions): UnorderedBulkOperation {\n    return new UnorderedBulkOperation(this as TODO_NODE_3286, resolveOptions(this, options));\n  }\n\n  /** Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types. */\n  initializeOrderedBulkOp(options?: BulkWriteOptions): OrderedBulkOperation {\n    return new OrderedBulkOperation(this as TODO_NODE_3286, resolveOptions(this, options));\n  }\n\n  /** Get the db scoped logger */\n  getLogger(): Logger {\n    return this.s.db.s.logger;\n  }\n\n  get logger(): Logger {\n    return this.s.db.s.logger;\n  }\n\n  /**\n   * Inserts a single document or a an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n   * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n   * can be overridden by setting the **forceServerObjectId** flag.\n   *\n   * @deprecated Use insertOne, insertMany or bulkWrite instead.\n   * @param docs - The documents to insert\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  insert(\n    docs: OptionalId<TSchema>[],\n    options: BulkWriteOptions,\n    callback: Callback<InsertManyResult<TSchema>>\n  ): Promise<InsertManyResult<TSchema>> | void {\n    emitWarningOnce(\n      'collection.insert is deprecated. Use insertOne, insertMany or bulkWrite instead.'\n    );\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options || { ordered: false };\n    docs = !Array.isArray(docs) ? [docs] : docs;\n\n    if (options.keepGoing === true) {\n      options.ordered = false;\n    }\n\n    return this.insertMany(docs, options, callback);\n  }\n\n  /**\n   * Updates documents.\n   *\n   * @deprecated use updateOne, updateMany or bulkWrite\n   * @param selector - The selector for the update operation.\n   * @param update - The update operations to be applied to the documents\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  update(\n    selector: Filter<TSchema>,\n    update: UpdateFilter<TSchema>,\n    options: UpdateOptions,\n    callback: Callback<Document>\n  ): Promise<UpdateResult> | void {\n    emitWarningOnce(\n      'collection.update is deprecated. Use updateOne, updateMany, or bulkWrite instead.'\n    );\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return this.updateMany(selector, update, options, callback);\n  }\n\n  /**\n   * Remove documents.\n   *\n   * @deprecated use deleteOne, deleteMany or bulkWrite\n   * @param selector - The selector for the update operation.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  remove(\n    selector: Filter<TSchema>,\n    options: DeleteOptions,\n    callback: Callback\n  ): Promise<DeleteResult> | void {\n    emitWarningOnce(\n      'collection.remove is deprecated. Use deleteOne, deleteMany, or bulkWrite instead.'\n    );\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    return this.deleteMany(selector, options, callback);\n  }\n\n  /**\n   * An estimated count of matching documents in the db to a filter.\n   *\n   * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n   * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n   * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n   *\n   * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n   *\n   * @param filter - The filter for the count.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  count(): Promise<number>;\n  count(callback: Callback<number>): void;\n  count(filter: Filter<TSchema>): Promise<number>;\n  count(filter: Filter<TSchema>, callback: Callback<number>): void;\n  count(filter: Filter<TSchema>, options: CountOptions): Promise<number>;\n  count(\n    filter: Filter<TSchema>,\n    options: CountOptions,\n    callback: Callback<number>\n  ): Promise<number> | void;\n  count(\n    filter?: Filter<TSchema> | CountOptions | Callback<number>,\n    options?: CountOptions | Callback<number>,\n    callback?: Callback<number>\n  ): Promise<number> | void {\n    if (typeof filter === 'function') {\n      (callback = filter as Callback<number>), (filter = {}), (options = {});\n    } else {\n      if (typeof options === 'function') (callback = options), (options = {});\n    }\n\n    filter ??= {};\n    return executeOperation(\n      getTopology(this),\n      new CountDocumentsOperation(this as TODO_NODE_3286, filter, resolveOptions(this, options)),\n      callback\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}