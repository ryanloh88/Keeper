{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;\n\nconst command_1 = require(\"./command\");\n\nconst utils_1 = require(\"../utils\");\n\nconst error_1 = require(\"../error\");\n\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n/** @public */\n\nexports.ProfilingLevel = Object.freeze({\n  off: 'off',\n  slowOnly: 'slow_only',\n  all: 'all'\n});\n/** @internal */\n\nclass SetProfilingLevelOperation extends command_1.CommandOperation {\n  constructor(db, level, options) {\n    super(db, options);\n    this.options = options;\n\n    switch (level) {\n      case exports.ProfilingLevel.off:\n        this.profile = 0;\n        break;\n\n      case exports.ProfilingLevel.slowOnly:\n        this.profile = 1;\n        break;\n\n      case exports.ProfilingLevel.all:\n        this.profile = 2;\n        break;\n\n      default:\n        this.profile = 0;\n        break;\n    }\n\n    this.level = level;\n  }\n\n  execute(server, session, callback) {\n    const level = this.level;\n\n    if (!levelValues.has(level)) {\n      return callback(new error_1.MongoInvalidArgumentError(`Profiling level must be one of \"${(0, utils_1.enumToString)(exports.ProfilingLevel)}\"`));\n    } // TODO(NODE-3483): Determine error to put here\n\n\n    super.executeCommand(server, session, {\n      profile: this.profile\n    }, (err, doc) => {\n      if (err == null && doc.ok === 1) return callback(undefined, level);\n      return err != null ? callback(err) : callback(new error_1.MongoRuntimeError('Error with profile command'));\n    });\n  }\n\n}\n\nexports.SetProfilingLevelOperation = SetProfilingLevelOperation;","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/operations/set_profiling_level.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAIA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,MAAM,WAAW,GAAG,IAAI,GAAJ,CAAQ,CAAC,KAAD,EAAQ,WAAR,EAAqB,KAArB,CAAR,CAApB;AAEA;;AACa,OAAA,CAAA,cAAA,GAAiB,MAAM,CAAC,MAAP,CAAc;AAC1C,EAAA,GAAG,EAAE,KADqC;AAE1C,EAAA,QAAQ,EAAE,WAFgC;AAG1C,EAAA,GAAG,EAAE;AAHqC,CAAd,CAAjB;AAYb;;AACA,MAAa,0BAAb,SAAgD,SAAA,CAAA,gBAAhD,CAAgF;AAK9E,EAAA,WAAA,CAAY,EAAZ,EAAoB,KAApB,EAA2C,OAA3C,EAA4E;AAC1E,UAAM,EAAN,EAAU,OAAV;AACA,SAAK,OAAL,GAAe,OAAf;;AACA,YAAQ,KAAR;AACE,WAAK,OAAA,CAAA,cAAA,CAAe,GAApB;AACE,aAAK,OAAL,GAAe,CAAf;AACA;;AACF,WAAK,OAAA,CAAA,cAAA,CAAe,QAApB;AACE,aAAK,OAAL,GAAe,CAAf;AACA;;AACF,WAAK,OAAA,CAAA,cAAA,CAAe,GAApB;AACE,aAAK,OAAL,GAAe,CAAf;AACA;;AACF;AACE,aAAK,OAAL,GAAe,CAAf;AACA;AAZJ;;AAeA,SAAK,KAAL,GAAa,KAAb;AACD;;AAED,EAAA,OAAO,CAAC,MAAD,EAAiB,OAAjB,EAAyC,QAAzC,EAA2E;AAChF,UAAM,KAAK,GAAG,KAAK,KAAnB;;AAEA,QAAI,CAAC,WAAW,CAAC,GAAZ,CAAgB,KAAhB,CAAL,EAA6B;AAC3B,aAAO,QAAQ,CACb,IAAI,OAAA,CAAA,yBAAJ,CACE,mCAAmC,CAAA,GAAA,OAAA,CAAA,YAAA,EAAa,OAAA,CAAA,cAAb,CAA4B,GADjE,CADa,CAAf;AAKD,KAT+E,CAWhF;;;AACA,UAAM,cAAN,CAAqB,MAArB,EAA6B,OAA7B,EAAsC;AAAE,MAAA,OAAO,EAAE,KAAK;AAAhB,KAAtC,EAAiE,CAAC,GAAD,EAAM,GAAN,KAAa;AAC5E,UAAI,GAAG,IAAI,IAAP,IAAe,GAAG,CAAC,EAAJ,KAAW,CAA9B,EAAiC,OAAO,QAAQ,CAAC,SAAD,EAAY,KAAZ,CAAf;AACjC,aAAO,GAAG,IAAI,IAAP,GACH,QAAQ,CAAC,GAAD,CADL,GAEH,QAAQ,CAAC,IAAI,OAAA,CAAA,iBAAJ,CAAsB,4BAAtB,CAAD,CAFZ;AAGD,KALD;AAMD;;AA5C6E;;AAAhF,OAAA,CAAA,0BAAA,GAAA,0BAAA","sourcesContent":["import { CommandOperation, CommandOperationOptions } from './command';\nimport type { Callback } from '../utils';\nimport { enumToString } from '../utils';\nimport type { Server } from '../sdam/server';\nimport type { Db } from '../db';\nimport type { ClientSession } from '../sessions';\nimport { MongoRuntimeError, MongoInvalidArgumentError } from '../error';\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n\n/** @public */\nexport const ProfilingLevel = Object.freeze({\n  off: 'off',\n  slowOnly: 'slow_only',\n  all: 'all'\n} as const);\n\n/** @public */\nexport type ProfilingLevel = typeof ProfilingLevel[keyof typeof ProfilingLevel];\n\n/** @public */\nexport type SetProfilingLevelOptions = CommandOperationOptions;\n\n/** @internal */\nexport class SetProfilingLevelOperation extends CommandOperation<ProfilingLevel> {\n  options: SetProfilingLevelOptions;\n  level: ProfilingLevel;\n  profile: 0 | 1 | 2;\n\n  constructor(db: Db, level: ProfilingLevel, options: SetProfilingLevelOptions) {\n    super(db, options);\n    this.options = options;\n    switch (level) {\n      case ProfilingLevel.off:\n        this.profile = 0;\n        break;\n      case ProfilingLevel.slowOnly:\n        this.profile = 1;\n        break;\n      case ProfilingLevel.all:\n        this.profile = 2;\n        break;\n      default:\n        this.profile = 0;\n        break;\n    }\n\n    this.level = level;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<ProfilingLevel>): void {\n    const level = this.level;\n\n    if (!levelValues.has(level)) {\n      return callback(\n        new MongoInvalidArgumentError(\n          `Profiling level must be one of \"${enumToString(ProfilingLevel)}\"`\n        )\n      );\n    }\n\n    // TODO(NODE-3483): Determine error to put here\n    super.executeCommand(server, session, { profile: this.profile }, (err, doc) => {\n      if (err == null && doc.ok === 1) return callback(undefined, level);\n      return err != null\n        ? callback(err)\n        : callback(new MongoRuntimeError('Error with profile command'));\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}