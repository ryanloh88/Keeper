{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GetMoreOperation = void 0;\n\nconst error_1 = require(\"../error\");\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass GetMoreOperation extends operation_1.AbstractOperation {\n  constructor(ns, cursorId, server) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    super(options);\n    this.options = options;\n    this.ns = ns;\n    this.cursorId = cursorId;\n    this.server = server;\n  }\n  /**\n   * Although there is a server already associated with the get more operation, the signature\n   * for execute passes a server so we will just use that one.\n   */\n\n\n  execute(server, session, callback) {\n    if (server !== this.server) {\n      return callback(new error_1.MongoRuntimeError('Getmore must run on the same server operation began on'));\n    }\n\n    server.getMore(this.ns, this.cursorId, this.options, callback);\n  }\n\n}\n\nexports.GetMoreOperation = GetMoreOperation;\n(0, operation_1.defineAspects)(GetMoreOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.CURSOR_ITERATING]);","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/operations/get_more.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAGA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAgBA;;;AACA,MAAa,gBAAb,SAAsC,WAAA,CAAA,iBAAtC,CAAuD;AAKrD,EAAA,WAAA,CAAY,EAAZ,EAAkC,QAAlC,EAAkD,MAAlD,EAA8F;AAAA,QAA5B,OAA4B,uEAAF,EAAE;AAC5F,UAAM,OAAN;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,EAAL,GAAU,EAAV;AACA,SAAK,QAAL,GAAgB,QAAhB;AACA,SAAK,MAAL,GAAc,MAAd;AACD;AAED;;;AAGG;;;AACH,EAAA,OAAO,CAAC,MAAD,EAAiB,OAAjB,EAAyC,QAAzC,EAAqE;AAC1E,QAAI,MAAM,KAAK,KAAK,MAApB,EAA4B;AAC1B,aAAO,QAAQ,CACb,IAAI,OAAA,CAAA,iBAAJ,CAAsB,wDAAtB,CADa,CAAf;AAGD;;AACD,IAAA,MAAM,CAAC,OAAP,CAAe,KAAK,EAApB,EAAwB,KAAK,QAA7B,EAAuC,KAAK,OAA5C,EAAqD,QAArD;AACD;;AAxBoD;;AAAvD,OAAA,CAAA,gBAAA,GAAA,gBAAA;AA2BA,CAAA,GAAA,WAAA,CAAA,aAAA,EAAc,gBAAd,EAAgC,CAAC,WAAA,CAAA,MAAA,CAAO,cAAR,EAAwB,WAAA,CAAA,MAAA,CAAO,gBAA/B,CAAhC","sourcesContent":["import type { Document, Long } from '../bson';\nimport { MongoRuntimeError } from '../error';\nimport type { Callback, MongoDBNamespace } from '../utils';\nimport type { Server } from '../sdam/server';\nimport { Aspect, AbstractOperation, OperationOptions, defineAspects } from './operation';\nimport type { ClientSession } from '../sessions';\n\n/**\n * @public\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport interface GetMoreOptions extends OperationOptions {\n  /** Set the batchSize for the getMoreCommand when iterating over the query results. */\n  batchSize?: number;\n  /** You can put a $comment field on a query to make looking in the profiler logs simpler. */\n  comment?: string | Document;\n  /** Number of milliseconds to wait before aborting the query. */\n  maxTimeMS?: number;\n}\n\n/** @internal */\nexport class GetMoreOperation extends AbstractOperation {\n  cursorId: Long;\n  options: GetMoreOptions;\n  server: Server;\n\n  constructor(ns: MongoDBNamespace, cursorId: Long, server: Server, options: GetMoreOptions = {}) {\n    super(options);\n    this.options = options;\n    this.ns = ns;\n    this.cursorId = cursorId;\n    this.server = server;\n  }\n\n  /**\n   * Although there is a server already associated with the get more operation, the signature\n   * for execute passes a server so we will just use that one.\n   */\n  execute(server: Server, session: ClientSession, callback: Callback<Document>): void {\n    if (server !== this.server) {\n      return callback(\n        new MongoRuntimeError('Getmore must run on the same server operation began on')\n      );\n    }\n    server.getMore(this.ns, this.cursorId, this.options, callback);\n  }\n}\n\ndefineAspects(GetMoreOperation, [Aspect.READ_OPERATION, Aspect.CURSOR_ITERATING]);\n"]},"metadata":{},"sourceType":"script"}