{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BulkWriteOperation = void 0;\n\nconst operation_1 = require(\"./operation\");\n/** @internal */\n\n\nclass BulkWriteOperation extends operation_1.AbstractOperation {\n  constructor(collection, operations, options) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.operations = operations;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const operations = this.operations;\n    const options = { ...this.options,\n      ...this.bsonOptions,\n      readPreference: this.readPreference\n    }; // Create the bulk operation\n\n    const bulk = options.ordered === false ? coll.initializeUnorderedBulkOp(options) : coll.initializeOrderedBulkOp(options); // for each op go through and add to the bulk\n\n    try {\n      for (let i = 0; i < operations.length; i++) {\n        bulk.raw(operations[i]);\n      }\n    } catch (err) {\n      return callback(err);\n    } // Execute the bulk\n\n\n    bulk.execute({ ...options,\n      session\n    }, (err, r) => {\n      // We have connection level error\n      if (!r && err) {\n        return callback(err);\n      } // Return the results\n\n\n      callback(undefined, r);\n    });\n  }\n\n}\n\nexports.BulkWriteOperation = BulkWriteOperation;\n(0, operation_1.defineAspects)(BulkWriteOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/operations/bulk_write.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;AAYA;;;AACA,MAAa,kBAAb,SAAwC,WAAA,CAAA,iBAAxC,CAA0E;AAKxE,EAAA,WAAA,CACE,UADF,EAEE,UAFF,EAGE,OAHF,EAG2B;AAEzB,UAAM,OAAN;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,UAAL,GAAkB,UAAlB;AACD;;AAED,EAAA,OAAO,CAAC,MAAD,EAAiB,OAAjB,EAAyC,QAAzC,EAA4E;AACjF,UAAM,IAAI,GAAG,KAAK,UAAlB;AACA,UAAM,UAAU,GAAG,KAAK,UAAxB;AACA,UAAM,OAAO,GAAG,EAAE,GAAG,KAAK,OAAV;AAAmB,SAAG,KAAK,WAA3B;AAAwC,MAAA,cAAc,EAAE,KAAK;AAA7D,KAAhB,CAHiF,CAKjF;;AACA,UAAM,IAAI,GACR,OAAO,CAAC,OAAR,KAAoB,KAApB,GACI,IAAI,CAAC,yBAAL,CAA+B,OAA/B,CADJ,GAEI,IAAI,CAAC,uBAAL,CAA6B,OAA7B,CAHN,CANiF,CAWjF;;AACA,QAAI;AACF,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAAU,CAAC,MAA/B,EAAuC,CAAC,EAAxC,EAA4C;AAC1C,QAAA,IAAI,CAAC,GAAL,CAAS,UAAU,CAAC,CAAD,CAAnB;AACD;AACF,KAJD,CAIE,OAAO,GAAP,EAAY;AACZ,aAAO,QAAQ,CAAC,GAAD,CAAf;AACD,KAlBgF,CAoBjF;;;AACA,IAAA,IAAI,CAAC,OAAL,CAAa,EAAE,GAAG,OAAL;AAAc,MAAA;AAAd,KAAb,EAAsC,CAAC,GAAD,EAAM,CAAN,KAAW;AAC/C;AACA,UAAI,CAAC,CAAD,IAAM,GAAV,EAAe;AACb,eAAO,QAAQ,CAAC,GAAD,CAAf;AACD,OAJ8C,CAM/C;;;AACA,MAAA,QAAQ,CAAC,SAAD,EAAY,CAAZ,CAAR;AACD,KARD;AASD;;AA9CuE;;AAA1E,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAiDA,CAAA,GAAA,WAAA,CAAA,aAAA,EAAc,kBAAd,EAAkC,CAAC,WAAA,CAAA,MAAA,CAAO,eAAR,CAAlC","sourcesContent":["import { Aspect, defineAspects, AbstractOperation } from './operation';\nimport type { Callback } from '../utils';\nimport type { Collection } from '../collection';\nimport type {\n  BulkOperationBase,\n  BulkWriteResult,\n  BulkWriteOptions,\n  AnyBulkWriteOperation\n} from '../bulk/common';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\n\n/** @internal */\nexport class BulkWriteOperation extends AbstractOperation<BulkWriteResult> {\n  options: BulkWriteOptions;\n  collection: Collection;\n  operations: AnyBulkWriteOperation[];\n\n  constructor(\n    collection: Collection,\n    operations: AnyBulkWriteOperation[],\n    options: BulkWriteOptions\n  ) {\n    super(options);\n    this.options = options;\n    this.collection = collection;\n    this.operations = operations;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<BulkWriteResult>): void {\n    const coll = this.collection;\n    const operations = this.operations;\n    const options = { ...this.options, ...this.bsonOptions, readPreference: this.readPreference };\n\n    // Create the bulk operation\n    const bulk: BulkOperationBase =\n      options.ordered === false\n        ? coll.initializeUnorderedBulkOp(options)\n        : coll.initializeOrderedBulkOp(options);\n\n    // for each op go through and add to the bulk\n    try {\n      for (let i = 0; i < operations.length; i++) {\n        bulk.raw(operations[i]);\n      }\n    } catch (err) {\n      return callback(err);\n    }\n\n    // Execute the bulk\n    bulk.execute({ ...options, session }, (err, r) => {\n      // We have connection level error\n      if (!r && err) {\n        return callback(err);\n      }\n\n      // Return the results\n      callback(undefined, r);\n    });\n  }\n}\n\ndefineAspects(BulkWriteOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script"}