{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidateCollectionOperation = void 0;\n\nconst command_1 = require(\"./command\");\n\nconst error_1 = require(\"../error\");\n/** @internal */\n\n\nclass ValidateCollectionOperation extends command_1.CommandOperation {\n  constructor(admin, collectionName, options) {\n    // Decorate command with extra options\n    const command = {\n      validate: collectionName\n    };\n    const keys = Object.keys(options);\n\n    for (let i = 0; i < keys.length; i++) {\n      if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n        command[keys[i]] = options[keys[i]];\n      }\n    }\n\n    super(admin.s.db, options);\n    this.options = options;\n    this.command = command;\n    this.collectionName = collectionName;\n  }\n\n  execute(server, session, callback) {\n    const collectionName = this.collectionName;\n    super.executeCommand(server, session, this.command, (err, doc) => {\n      if (err != null) return callback(err); // TODO(NODE-3483): Replace these with MongoUnexpectedServerResponseError\n\n      if (doc.ok === 0) return callback(new error_1.MongoRuntimeError('Error with validate command'));\n      if (doc.result != null && typeof doc.result !== 'string') return callback(new error_1.MongoRuntimeError('Error with validation data'));\n      if (doc.result != null && doc.result.match(/exception|corrupt/) != null) return callback(new error_1.MongoRuntimeError(`Invalid collection ${collectionName}`));\n      if (doc.valid != null && !doc.valid) return callback(new error_1.MongoRuntimeError(`Invalid collection ${collectionName}`));\n      return callback(undefined, doc);\n    });\n  }\n\n}\n\nexports.ValidateCollectionOperation = ValidateCollectionOperation;","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/operations/validate_collection.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAMA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAQA;;;AACA,MAAa,2BAAb,SAAiD,SAAA,CAAA,gBAAjD,CAA2E;AAKzE,EAAA,WAAA,CAAY,KAAZ,EAA0B,cAA1B,EAAkD,OAAlD,EAAoF;AAClF;AACA,UAAM,OAAO,GAAa;AAAE,MAAA,QAAQ,EAAE;AAAZ,KAA1B;AACA,UAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,OAAZ,CAAb;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AACpC,UAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,OAArC,EAA8C,IAAI,CAAC,CAAD,CAAlD,KAA0D,IAAI,CAAC,CAAD,CAAJ,KAAY,SAA1E,EAAqF;AACnF,QAAA,OAAO,CAAC,IAAI,CAAC,CAAD,CAAL,CAAP,GAAoB,OAAoB,CAAC,IAAI,CAAC,CAAD,CAAL,CAAxC;AACD;AACF;;AAED,UAAM,KAAK,CAAC,CAAN,CAAQ,EAAd,EAAkB,OAAlB;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,cAAL,GAAsB,cAAtB;AACD;;AAED,EAAA,OAAO,CAAC,MAAD,EAAiB,OAAjB,EAAyC,QAAzC,EAAqE;AAC1E,UAAM,cAAc,GAAG,KAAK,cAA5B;AAEA,UAAM,cAAN,CAAqB,MAArB,EAA6B,OAA7B,EAAsC,KAAK,OAA3C,EAAoD,CAAC,GAAD,EAAM,GAAN,KAAa;AAC/D,UAAI,GAAG,IAAI,IAAX,EAAiB,OAAO,QAAQ,CAAC,GAAD,CAAf,CAD8C,CAG/D;;AACA,UAAI,GAAG,CAAC,EAAJ,KAAW,CAAf,EAAkB,OAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,iBAAJ,CAAsB,6BAAtB,CAAD,CAAf;AAClB,UAAI,GAAG,CAAC,MAAJ,IAAc,IAAd,IAAsB,OAAO,GAAG,CAAC,MAAX,KAAsB,QAAhD,EACE,OAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,iBAAJ,CAAsB,4BAAtB,CAAD,CAAf;AACF,UAAI,GAAG,CAAC,MAAJ,IAAc,IAAd,IAAsB,GAAG,CAAC,MAAJ,CAAW,KAAX,CAAiB,mBAAjB,KAAyC,IAAnE,EACE,OAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,iBAAJ,CAAsB,sBAAsB,cAAc,EAA1D,CAAD,CAAf;AACF,UAAI,GAAG,CAAC,KAAJ,IAAa,IAAb,IAAqB,CAAC,GAAG,CAAC,KAA9B,EACE,OAAO,QAAQ,CAAC,IAAI,OAAA,CAAA,iBAAJ,CAAsB,sBAAsB,cAAc,EAA1D,CAAD,CAAf;AAEF,aAAO,QAAQ,CAAC,SAAD,EAAY,GAAZ,CAAf;AACD,KAbD;AAcD;;AAtCwE;;AAA3E,OAAA,CAAA,2BAAA,GAAA,2BAAA","sourcesContent":["import { CommandOperation, CommandOperationOptions } from './command';\nimport type { Callback } from '../utils';\nimport type { Document } from '../bson';\nimport type { Server } from '../sdam/server';\nimport type { Admin } from '../admin';\nimport type { ClientSession } from '../sessions';\nimport { MongoRuntimeError } from '../error';\n\n/** @public */\nexport interface ValidateCollectionOptions extends CommandOperationOptions {\n  /** Validates a collection in the background, without interrupting read or write traffic (only in MongoDB 4.4+) */\n  background?: boolean;\n}\n\n/** @internal */\nexport class ValidateCollectionOperation extends CommandOperation<Document> {\n  options: ValidateCollectionOptions;\n  collectionName: string;\n  command: Document;\n\n  constructor(admin: Admin, collectionName: string, options: ValidateCollectionOptions) {\n    // Decorate command with extra options\n    const command: Document = { validate: collectionName };\n    const keys = Object.keys(options);\n    for (let i = 0; i < keys.length; i++) {\n      if (Object.prototype.hasOwnProperty.call(options, keys[i]) && keys[i] !== 'session') {\n        command[keys[i]] = (options as Document)[keys[i]];\n      }\n    }\n\n    super(admin.s.db, options);\n    this.options = options;\n    this.command = command;\n    this.collectionName = collectionName;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<Document>): void {\n    const collectionName = this.collectionName;\n\n    super.executeCommand(server, session, this.command, (err, doc) => {\n      if (err != null) return callback(err);\n\n      // TODO(NODE-3483): Replace these with MongoUnexpectedServerResponseError\n      if (doc.ok === 0) return callback(new MongoRuntimeError('Error with validate command'));\n      if (doc.result != null && typeof doc.result !== 'string')\n        return callback(new MongoRuntimeError('Error with validation data'));\n      if (doc.result != null && doc.result.match(/exception|corrupt/) != null)\n        return callback(new MongoRuntimeError(`Invalid collection ${collectionName}`));\n      if (doc.valid != null && !doc.valid)\n        return callback(new MongoRuntimeError(`Invalid collection ${collectionName}`));\n\n      return callback(undefined, doc);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}