{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CollectionsOperation = void 0;\n\nconst operation_1 = require(\"./operation\");\n\nconst collection_1 = require(\"../collection\");\n/** @internal */\n\n\nclass CollectionsOperation extends operation_1.AbstractOperation {\n  constructor(db, options) {\n    super(options);\n    this.options = options;\n    this.db = db;\n  }\n\n  execute(server, session, callback) {\n    const db = this.db; // Let's get the collection names\n\n    db.listCollections({}, { ...this.options,\n      nameOnly: true,\n      readPreference: this.readPreference,\n      session\n    }).toArray((err, documents) => {\n      if (err || !documents) return callback(err); // Filter collections removing any illegal ones\n\n      documents = documents.filter(doc => doc.name.indexOf('$') === -1); // Return the collection objects\n\n      callback(undefined, documents.map(d => {\n        return new collection_1.Collection(db, d.name, db.s.options);\n      }));\n    });\n  }\n\n}\n\nexports.CollectionsOperation = CollectionsOperation;","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/operations/collections.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAUA;;;AACA,MAAa,oBAAb,SAA0C,WAAA,CAAA,iBAA1C,CAAyE;AAIvE,EAAA,WAAA,CAAY,EAAZ,EAAoB,OAApB,EAA+C;AAC7C,UAAM,OAAN;AACA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,EAAL,GAAU,EAAV;AACD;;AAED,EAAA,OAAO,CAAC,MAAD,EAAiB,OAAjB,EAAyC,QAAzC,EAAyE;AAC9E,UAAM,EAAE,GAAG,KAAK,EAAhB,CAD8E,CAG9E;;AACA,IAAA,EAAE,CAAC,eAAH,CACE,EADF,EAEE,EAAE,GAAG,KAAK,OAAV;AAAmB,MAAA,QAAQ,EAAE,IAA7B;AAAmC,MAAA,cAAc,EAAE,KAAK,cAAxD;AAAwE,MAAA;AAAxE,KAFF,EAGE,OAHF,CAGU,CAAC,GAAD,EAAM,SAAN,KAAmB;AAC3B,UAAI,GAAG,IAAI,CAAC,SAAZ,EAAuB,OAAO,QAAQ,CAAC,GAAD,CAAf,CADI,CAE3B;;AACA,MAAA,SAAS,GAAG,SAAS,CAAC,MAAV,CAAiB,GAAG,IAAI,GAAG,CAAC,IAAJ,CAAS,OAAT,CAAiB,GAAjB,MAA0B,CAAC,CAAnD,CAAZ,CAH2B,CAK3B;;AACA,MAAA,QAAQ,CACN,SADM,EAEN,SAAS,CAAC,GAAV,CAAc,CAAC,IAAG;AAChB,eAAO,IAAI,YAAA,CAAA,UAAJ,CAAe,EAAf,EAAmB,CAAC,CAAC,IAArB,EAA2B,EAAE,CAAC,CAAH,CAAK,OAAhC,CAAP;AACD,OAFD,CAFM,CAAR;AAMD,KAfD;AAgBD;;AA9BsE;;AAAzE,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourcesContent":["import { AbstractOperation, OperationOptions } from './operation';\nimport { Collection } from '../collection';\nimport type { Callback } from '../utils';\nimport type { Db } from '../db';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\n\nexport interface CollectionsOptions extends OperationOptions {\n  nameOnly?: boolean;\n}\n\n/** @internal */\nexport class CollectionsOperation extends AbstractOperation<Collection[]> {\n  options: CollectionsOptions;\n  db: Db;\n\n  constructor(db: Db, options: CollectionsOptions) {\n    super(options);\n    this.options = options;\n    this.db = db;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<Collection[]>): void {\n    const db = this.db;\n\n    // Let's get the collection names\n    db.listCollections(\n      {},\n      { ...this.options, nameOnly: true, readPreference: this.readPreference, session }\n    ).toArray((err, documents) => {\n      if (err || !documents) return callback(err);\n      // Filter collections removing any illegal ones\n      documents = documents.filter(doc => doc.name.indexOf('$') === -1);\n\n      // Return the collection objects\n      callback(\n        undefined,\n        documents.map(d => {\n          return new Collection(db, d.name, db.s.options);\n        })\n      );\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script"}