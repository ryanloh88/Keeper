{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CreateCollectionOperation = void 0;\n\nconst command_1 = require(\"./command\");\n\nconst operation_1 = require(\"./operation\");\n\nconst collection_1 = require(\"../collection\");\n\nconst ILLEGAL_COMMAND_FIELDS = new Set(['w', 'wtimeout', 'j', 'fsync', 'autoIndexId', 'pkFactory', 'raw', 'readPreference', 'session', 'readConcern', 'writeConcern', 'raw', 'fieldsAsRaw', 'promoteLongs', 'promoteValues', 'promoteBuffers', 'bsonRegExp', 'serializeFunctions', 'ignoreUndefined']);\n/** @internal */\n\nclass CreateCollectionOperation extends command_1.CommandOperation {\n  constructor(db, name) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    super(db, options);\n    this.options = options;\n    this.db = db;\n    this.name = name;\n  }\n\n  execute(server, session, callback) {\n    const db = this.db;\n    const name = this.name;\n    const options = this.options;\n\n    const done = err => {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(undefined, new collection_1.Collection(db, name, options));\n    };\n\n    const cmd = {\n      create: name\n    };\n\n    for (const n in options) {\n      if (options[n] != null && typeof options[n] !== 'function' && !ILLEGAL_COMMAND_FIELDS.has(n)) {\n        cmd[n] = options[n];\n      }\n    } // otherwise just execute the command\n\n\n    super.executeCommand(server, session, cmd, done);\n  }\n\n}\n\nexports.CreateCollectionOperation = CreateCollectionOperation;\n(0, operation_1.defineAspects)(CreateCollectionOperation, [operation_1.Aspect.WRITE_OPERATION]);","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/operations/create_collection.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAQA,MAAM,sBAAsB,GAAG,IAAI,GAAJ,CAAQ,CACrC,GADqC,EAErC,UAFqC,EAGrC,GAHqC,EAIrC,OAJqC,EAKrC,aALqC,EAMrC,WANqC,EAOrC,KAPqC,EAQrC,gBARqC,EASrC,SATqC,EAUrC,aAVqC,EAWrC,cAXqC,EAYrC,KAZqC,EAarC,aAbqC,EAcrC,cAdqC,EAerC,eAfqC,EAgBrC,gBAhBqC,EAiBrC,YAjBqC,EAkBrC,oBAlBqC,EAmBrC,iBAnBqC,CAAR,CAA/B;AAoEA;;AACA,MAAa,yBAAb,SAA+C,SAAA,CAAA,gBAA/C,CAA2E;AAKzE,EAAA,WAAA,CAAY,EAAZ,EAAoB,IAApB,EAAuE;AAAA,QAArC,OAAqC,uEAAF,EAAE;AACrE,UAAM,EAAN,EAAU,OAAV;AAEA,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,EAAL,GAAU,EAAV;AACA,SAAK,IAAL,GAAY,IAAZ;AACD;;AAED,EAAA,OAAO,CAAC,MAAD,EAAiB,OAAjB,EAAyC,QAAzC,EAAuE;AAC5E,UAAM,EAAE,GAAG,KAAK,EAAhB;AACA,UAAM,IAAI,GAAG,KAAK,IAAlB;AACA,UAAM,OAAO,GAAG,KAAK,OAArB;;AAEA,UAAM,IAAI,GAAa,GAAG,IAAG;AAC3B,UAAI,GAAJ,EAAS;AACP,eAAO,QAAQ,CAAC,GAAD,CAAf;AACD;;AAED,MAAA,QAAQ,CAAC,SAAD,EAAY,IAAI,YAAA,CAAA,UAAJ,CAAe,EAAf,EAAmB,IAAnB,EAAyB,OAAzB,CAAZ,CAAR;AACD,KAND;;AAQA,UAAM,GAAG,GAAa;AAAE,MAAA,MAAM,EAAE;AAAV,KAAtB;;AACA,SAAK,MAAM,CAAX,IAAgB,OAAhB,EAAyB;AACvB,UACG,OAAe,CAAC,CAAD,CAAf,IAAsB,IAAtB,IACD,OAAQ,OAAe,CAAC,CAAD,CAAvB,KAA+B,UAD9B,IAED,CAAC,sBAAsB,CAAC,GAAvB,CAA2B,CAA3B,CAHH,EAIE;AACA,QAAA,GAAG,CAAC,CAAD,CAAH,GAAU,OAAe,CAAC,CAAD,CAAzB;AACD;AACF,KAtB2E,CAwB5E;;;AACA,UAAM,cAAN,CAAqB,MAArB,EAA6B,OAA7B,EAAsC,GAAtC,EAA2C,IAA3C;AACD;;AAvCwE;;AAA3E,OAAA,CAAA,yBAAA,GAAA,yBAAA;AA0CA,CAAA,GAAA,WAAA,CAAA,aAAA,EAAc,yBAAd,EAAyC,CAAC,WAAA,CAAA,MAAA,CAAO,eAAR,CAAzC","sourcesContent":["import { CommandOperation, CommandOperationOptions } from './command';\nimport { Aspect, defineAspects } from './operation';\nimport { Collection } from '../collection';\nimport type { Callback } from '../utils';\nimport type { Document } from '../bson';\nimport type { Server } from '../sdam/server';\nimport type { Db } from '../db';\nimport type { PkFactory } from '../mongo_client';\nimport type { ClientSession } from '../sessions';\n\nconst ILLEGAL_COMMAND_FIELDS = new Set([\n  'w',\n  'wtimeout',\n  'j',\n  'fsync',\n  'autoIndexId',\n  'pkFactory',\n  'raw',\n  'readPreference',\n  'session',\n  'readConcern',\n  'writeConcern',\n  'raw',\n  'fieldsAsRaw',\n  'promoteLongs',\n  'promoteValues',\n  'promoteBuffers',\n  'bsonRegExp',\n  'serializeFunctions',\n  'ignoreUndefined'\n]);\n\n/** @public\n * Configuration options for timeseries collections\n * @see https://docs.mongodb.com/manual/core/timeseries-collections/\n */\nexport interface TimeSeriesCollectionOptions extends Document {\n  timeField: string;\n  metaField?: string;\n  granularity?: 'seconds' | 'minutes' | 'hours' | string;\n}\n\n/** @public */\nexport interface CreateCollectionOptions extends CommandOperationOptions {\n  /** Returns an error if the collection does not exist */\n  strict?: boolean;\n  /** Create a capped collection */\n  capped?: boolean;\n  /** @deprecated Create an index on the _id field of the document, True by default on MongoDB 2.6 - 3.0 */\n  autoIndexId?: boolean;\n  /** The size of the capped collection in bytes */\n  size?: number;\n  /** The maximum number of documents in the capped collection */\n  max?: number;\n  /** Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag */\n  flags?: number;\n  /** Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection on MongoDB 3.0 or higher */\n  storageEngine?: Document;\n  /** Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation on MongoDB 3.2 or higher */\n  validator?: Document;\n  /** Determines how strictly MongoDB applies the validation rules to existing documents during an update on MongoDB 3.2 or higher */\n  validationLevel?: string;\n  /** Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted on MongoDB 3.2 or higher */\n  validationAction?: string;\n  /** Allows users to specify a default configuration for indexes when creating a collection on MongoDB 3.2 or higher */\n  indexOptionDefaults?: Document;\n  /** The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view; i.e. does not include the database name and implies the same database as the view to create on MongoDB 3.4 or higher */\n  viewOn?: string;\n  /** An array that consists of the aggregation pipeline stage. Creates the view by applying the specified pipeline to the viewOn collection or view on MongoDB 3.4 or higher */\n  pipeline?: Document[];\n  /** A primary key factory function for generation of custom _id keys. */\n  pkFactory?: PkFactory;\n  /** A document specifying configuration options for timeseries collections. */\n  timeseries?: TimeSeriesCollectionOptions;\n  /** The number of seconds after which a document in a timeseries collection expires. */\n  expireAfterSeconds?: number;\n}\n\n/** @internal */\nexport class CreateCollectionOperation extends CommandOperation<Collection> {\n  options: CreateCollectionOptions;\n  db: Db;\n  name: string;\n\n  constructor(db: Db, name: string, options: CreateCollectionOptions = {}) {\n    super(db, options);\n\n    this.options = options;\n    this.db = db;\n    this.name = name;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<Collection>): void {\n    const db = this.db;\n    const name = this.name;\n    const options = this.options;\n\n    const done: Callback = err => {\n      if (err) {\n        return callback(err);\n      }\n\n      callback(undefined, new Collection(db, name, options));\n    };\n\n    const cmd: Document = { create: name };\n    for (const n in options) {\n      if (\n        (options as any)[n] != null &&\n        typeof (options as any)[n] !== 'function' &&\n        !ILLEGAL_COMMAND_FIELDS.has(n)\n      ) {\n        cmd[n] = (options as any)[n];\n      }\n    }\n\n    // otherwise just execute the command\n    super.executeCommand(server, session, cmd, done);\n  }\n}\n\ndefineAspects(CreateCollectionOperation, [Aspect.WRITE_OPERATION]);\n"]},"metadata":{},"sourceType":"script"}