{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Explain = exports.ExplainVerbosity = void 0;\n\nconst error_1 = require(\"./error\");\n/** @public */\n\n\nexports.ExplainVerbosity = Object.freeze({\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n});\n/** @internal */\n\nclass Explain {\n  constructor(verbosity) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity ? exports.ExplainVerbosity.allPlansExecution : exports.ExplainVerbosity.queryPlanner;\n    } else {\n      this.verbosity = verbosity;\n    }\n  }\n\n  static fromOptions(options) {\n    if ((options === null || options === void 0 ? void 0 : options.explain) == null) return;\n    const explain = options.explain;\n\n    if (typeof explain === 'boolean' || typeof explain === 'string') {\n      return new Explain(explain);\n    }\n\n    throw new error_1.MongoInvalidArgumentError('Field \"explain\" must be a string or a boolean');\n  }\n\n}\n\nexports.Explain = Explain;","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/explain.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAEA;;;AACa,OAAA,CAAA,gBAAA,GAAmB,MAAM,CAAC,MAAP,CAAc;AAC5C,EAAA,YAAY,EAAE,cAD8B;AAE5C,EAAA,oBAAoB,EAAE,sBAFsB;AAG5C,EAAA,cAAc,EAAE,gBAH4B;AAI5C,EAAA,iBAAiB,EAAE;AAJyB,CAAd,CAAnB;AAwBb;;AACA,MAAa,OAAb,CAAoB;AAGlB,EAAA,WAAA,CAAY,SAAZ,EAA2C;AACzC,QAAI,OAAO,SAAP,KAAqB,SAAzB,EAAoC;AAClC,WAAK,SAAL,GAAiB,SAAS,GACtB,OAAA,CAAA,gBAAA,CAAiB,iBADK,GAEtB,OAAA,CAAA,gBAAA,CAAiB,YAFrB;AAGD,KAJD,MAIO;AACL,WAAK,SAAL,GAAiB,SAAjB;AACD;AACF;;AAEiB,SAAX,WAAW,CAAC,OAAD,EAAyB;AACzC,QAAI,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,OAAT,KAAoB,IAAxB,EAA8B;AAE9B,UAAM,OAAO,GAAG,OAAO,CAAC,OAAxB;;AACA,QAAI,OAAO,OAAP,KAAmB,SAAnB,IAAgC,OAAO,OAAP,KAAmB,QAAvD,EAAiE;AAC/D,aAAO,IAAI,OAAJ,CAAY,OAAZ,CAAP;AACD;;AAED,UAAM,IAAI,OAAA,CAAA,yBAAJ,CAA8B,+CAA9B,CAAN;AACD;;AAtBiB;;AAApB,OAAA,CAAA,OAAA,GAAA,OAAA","sourcesContent":["import { MongoInvalidArgumentError } from './error';\n\n/** @public */\nexport const ExplainVerbosity = Object.freeze({\n  queryPlanner: 'queryPlanner',\n  queryPlannerExtended: 'queryPlannerExtended',\n  executionStats: 'executionStats',\n  allPlansExecution: 'allPlansExecution'\n} as const);\n\n/** @public */\nexport type ExplainVerbosity = string;\n\n/**\n * For backwards compatibility, true is interpreted as \"allPlansExecution\"\n * and false as \"queryPlanner\". Prior to server version 3.6, aggregate()\n * ignores the verbosity parameter and executes in \"queryPlanner\".\n * @public\n */\nexport type ExplainVerbosityLike = ExplainVerbosity | boolean;\n\n/** @public */\nexport interface ExplainOptions {\n  /** Specifies the verbosity mode for the explain output. */\n  explain?: ExplainVerbosityLike;\n}\n\n/** @internal */\nexport class Explain {\n  verbosity: ExplainVerbosity;\n\n  constructor(verbosity: ExplainVerbosityLike) {\n    if (typeof verbosity === 'boolean') {\n      this.verbosity = verbosity\n        ? ExplainVerbosity.allPlansExecution\n        : ExplainVerbosity.queryPlanner;\n    } else {\n      this.verbosity = verbosity;\n    }\n  }\n\n  static fromOptions(options?: ExplainOptions): Explain | undefined {\n    if (options?.explain == null) return;\n\n    const explain = options.explain;\n    if (typeof explain === 'boolean' || typeof explain === 'string') {\n      return new Explain(explain);\n    }\n\n    throw new MongoInvalidArgumentError('Field \"explain\" must be a string or a boolean');\n  }\n}\n"]},"metadata":{},"sourceType":"script"}