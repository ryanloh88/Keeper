{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Db = void 0;\n\nconst utils_1 = require(\"./utils\");\n\nconst aggregation_cursor_1 = require(\"./cursor/aggregation_cursor\");\n\nconst bson_1 = require(\"./bson\");\n\nconst read_preference_1 = require(\"./read_preference\");\n\nconst error_1 = require(\"./error\");\n\nconst collection_1 = require(\"./collection\");\n\nconst change_stream_1 = require(\"./change_stream\");\n\nconst CONSTANTS = require(\"./constants\");\n\nconst write_concern_1 = require(\"./write_concern\");\n\nconst read_concern_1 = require(\"./read_concern\");\n\nconst logger_1 = require(\"./logger\");\n\nconst add_user_1 = require(\"./operations/add_user\");\n\nconst collections_1 = require(\"./operations/collections\");\n\nconst stats_1 = require(\"./operations/stats\");\n\nconst run_command_1 = require(\"./operations/run_command\");\n\nconst create_collection_1 = require(\"./operations/create_collection\");\n\nconst indexes_1 = require(\"./operations/indexes\");\n\nconst drop_1 = require(\"./operations/drop\");\n\nconst list_collections_1 = require(\"./operations/list_collections\");\n\nconst profiling_level_1 = require(\"./operations/profiling_level\");\n\nconst remove_user_1 = require(\"./operations/remove_user\");\n\nconst rename_1 = require(\"./operations/rename\");\n\nconst set_profiling_level_1 = require(\"./operations/set_profiling_level\");\n\nconst execute_operation_1 = require(\"./operations/execute_operation\");\n\nconst admin_1 = require(\"./admin\"); // Allowed parameters\n\n\nconst DB_OPTIONS_ALLOW_LIST = ['writeConcern', 'readPreference', 'readPreferenceTags', 'native_parser', 'forceServerObjectId', 'pkFactory', 'serializeFunctions', 'raw', 'authSource', 'ignoreUndefined', 'readConcern', 'retryMiliSeconds', 'numberOfRetries', 'loggerLevel', 'logger', 'promoteBuffers', 'promoteLongs', 'bsonRegExp', 'promoteValues', 'compression', 'retryWrites'];\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```js\n * const { MongoClient } = require('mongodb');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Select the database by name\n *   const testDb = client.db(dbName);\n *   client.close();\n * });\n * ```\n */\n\nclass Db {\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client, databaseName, options) {\n    var _a;\n\n    options = options !== null && options !== void 0 ? options : {}; // Filter the options\n\n    options = (0, utils_1.filterOptions)(options, DB_OPTIONS_ALLOW_LIST); // Ensure we have a valid db name\n\n    validateDatabaseName(databaseName); // Internal state of the db object\n\n    this.s = {\n      // Client\n      client,\n      // Options\n      options,\n      // Logger instance\n      logger: new logger_1.Logger('Db', options),\n      // Unpack read preference\n      readPreference: read_preference_1.ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: (0, bson_1.resolveBSONOptions)(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: (_a = options === null || options === void 0 ? void 0 : options.pkFactory) !== null && _a !== void 0 ? _a : utils_1.DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: read_concern_1.ReadConcern.fromOptions(options),\n      writeConcern: write_concern_1.WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new utils_1.MongoDBNamespace(databaseName)\n    };\n  }\n\n  get databaseName() {\n    return this.s.namespace.db;\n  } // Options\n\n\n  get options() {\n    return this.s.options;\n  } // slaveOk specified\n\n\n  get slaveOk() {\n    var _a;\n\n    return ((_a = this.s.readPreference) === null || _a === void 0 ? void 0 : _a.preference) !== 'primary' || false;\n  }\n\n  get readConcern() {\n    return this.s.readConcern;\n  }\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n\n\n  get readPreference() {\n    if (this.s.readPreference == null) {\n      return this.s.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions() {\n    return this.s.bsonOptions;\n  } // get the write Concern\n\n\n  get writeConcern() {\n    return this.s.writeConcern;\n  }\n\n  get namespace() {\n    return this.s.namespace.toString();\n  }\n\n  createCollection(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new create_collection_1.CreateCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  command(command, options, callback) {\n    if (typeof options === 'function') callback = options, options = {}; // Intentionally, we do not inherit options from parent for this operation.\n\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new run_command_1.RunCommandOperation(this, command, options !== null && options !== void 0 ? options : {}), callback);\n  }\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n\n\n  aggregate() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (arguments.length > 2) {\n      throw new error_1.MongoInvalidArgumentError('Method \"db.aggregate()\" accepts at most two arguments');\n    }\n\n    if (typeof pipeline === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"pipeline\" must not be function');\n    }\n\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new aggregation_cursor_1.AggregationCursor((0, utils_1.getTopology)(this), this.s.namespace, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the Admin db instance */\n\n\n  admin() {\n    return new admin_1.Admin(this);\n  }\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n\n\n  collection(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (typeof options === 'function') {\n      throw new error_1.MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n\n    const finalOptions = (0, utils_1.resolveOptions)(this, options);\n    return new collection_1.Collection(this, name, finalOptions);\n  }\n\n  stats(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new stats_1.DbStatsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  listCollections() {\n    let filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return new list_collections_1.ListCollectionsCursor(this, filter, (0, utils_1.resolveOptions)(this, options));\n  }\n\n  renameCollection(fromCollection, toCollection, options, callback) {\n    if (typeof options === 'function') callback = options, options = {}; // Intentionally, we do not inherit options from parent for this operation.\n\n    options = { ...options,\n      readPreference: read_preference_1.ReadPreference.PRIMARY\n    }; // Add return new collection\n\n    options.new_collection = true;\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new rename_1.RenameOperation(this.collection(fromCollection), toCollection, options), callback);\n  }\n\n  dropCollection(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new drop_1.DropCollectionOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  dropDatabase(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new drop_1.DropDatabaseOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  collections(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new collections_1.CollectionsOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  createIndex(name, indexSpec, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new indexes_1.CreateIndexOperation(this, name, indexSpec, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  addUser(username, password, options, callback) {\n    if (typeof password === 'function') {\n      callback = password, password = undefined, options = {};\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        callback = options, options = password, password = undefined;\n      } else {\n        options = password, callback = undefined, password = undefined;\n      }\n    } else {\n      if (typeof options === 'function') callback = options, options = {};\n    }\n\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new add_user_1.AddUserOperation(this, username, password, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  removeUser(username, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new remove_user_1.RemoveUserOperation(this, username, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  setProfilingLevel(level, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new set_profiling_level_1.SetProfilingLevelOperation(this, level, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  profilingLevel(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new profiling_level_1.ProfilingLevelOperation(this, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n\n  indexInformation(name, options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    return (0, execute_operation_1.executeOperation)((0, utils_1.getTopology)(this), new indexes_1.IndexInformationOperation(this, name, (0, utils_1.resolveOptions)(this, options)), callback);\n  }\n  /**\n   * Unref all sockets\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n\n\n  unref() {\n    (0, utils_1.getTopology)(this).unref();\n  }\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   */\n\n\n  watch() {\n    let pipeline = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new change_stream_1.ChangeStream(this, pipeline, (0, utils_1.resolveOptions)(this, options));\n  }\n  /** Return the db logger */\n\n\n  getLogger() {\n    return this.s.logger;\n  }\n\n  get logger() {\n    return this.s.logger;\n  }\n\n}\n\nexports.Db = Db;\nDb.SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\nDb.SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\nDb.SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\nDb.SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\nDb.SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\nDb.SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION; // TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\n\nfunction validateDatabaseName(databaseName) {\n  if (typeof databaseName !== 'string') throw new error_1.MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0) throw new error_1.MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1) throw new error_1.MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/db.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Callback,\n  resolveOptions,\n  filterOptions,\n  MongoDBNamespace,\n  getTopology,\n  DEFAULT_PK_FACTORY\n} from './utils';\nimport { AggregationCursor } from './cursor/aggregation_cursor';\nimport { Document, BSONSerializeOptions, resolveBSONOptions } from './bson';\nimport { ReadPreference, ReadPreferenceLike } from './read_preference';\nimport { MongoAPIError, MongoInvalidArgumentError } from './error';\nimport { Collection, CollectionOptions } from './collection';\nimport { ChangeStream, ChangeStreamOptions } from './change_stream';\nimport * as CONSTANTS from './constants';\nimport { WriteConcern, WriteConcernOptions } from './write_concern';\nimport { ReadConcern } from './read_concern';\nimport { Logger, LoggerOptions } from './logger';\nimport type { AggregateOptions } from './operations/aggregate';\nimport { AddUserOperation, AddUserOptions } from './operations/add_user';\nimport { CollectionsOperation } from './operations/collections';\nimport { DbStatsOperation, DbStatsOptions } from './operations/stats';\nimport { RunCommandOperation, RunCommandOptions } from './operations/run_command';\nimport { CreateCollectionOperation, CreateCollectionOptions } from './operations/create_collection';\nimport {\n  CreateIndexOperation,\n  IndexInformationOperation,\n  CreateIndexesOptions,\n  IndexSpecification\n} from './operations/indexes';\nimport {\n  DropCollectionOperation,\n  DropDatabaseOperation,\n  DropDatabaseOptions,\n  DropCollectionOptions\n} from './operations/drop';\nimport {\n  CollectionInfo,\n  ListCollectionsCursor,\n  ListCollectionsOptions\n} from './operations/list_collections';\nimport { ProfilingLevelOperation, ProfilingLevelOptions } from './operations/profiling_level';\nimport { RemoveUserOperation, RemoveUserOptions } from './operations/remove_user';\nimport { RenameOperation, RenameOptions } from './operations/rename';\nimport {\n  SetProfilingLevelOperation,\n  SetProfilingLevelOptions,\n  ProfilingLevel\n} from './operations/set_profiling_level';\nimport { executeOperation } from './operations/execute_operation';\nimport type { IndexInformationOptions } from './operations/common_functions';\nimport type { MongoClient, PkFactory } from './mongo_client';\nimport { Admin } from './admin';\nimport type { TODO_NODE_3286 } from './mongo_types';\n\n// Allowed parameters\nconst DB_OPTIONS_ALLOW_LIST = [\n  'writeConcern',\n  'readPreference',\n  'readPreferenceTags',\n  'native_parser',\n  'forceServerObjectId',\n  'pkFactory',\n  'serializeFunctions',\n  'raw',\n  'authSource',\n  'ignoreUndefined',\n  'readConcern',\n  'retryMiliSeconds',\n  'numberOfRetries',\n  'loggerLevel',\n  'logger',\n  'promoteBuffers',\n  'promoteLongs',\n  'bsonRegExp',\n  'promoteValues',\n  'compression',\n  'retryWrites'\n];\n\n/** @internal */\nexport interface DbPrivate {\n  client: MongoClient;\n  options?: DbOptions;\n  logger: Logger;\n  readPreference?: ReadPreference;\n  pkFactory: PkFactory;\n  readConcern?: ReadConcern;\n  bsonOptions: BSONSerializeOptions;\n  writeConcern?: WriteConcern;\n  namespace: MongoDBNamespace;\n}\n\n/** @public */\nexport interface DbOptions extends BSONSerializeOptions, WriteConcernOptions, LoggerOptions {\n  /** If the database authentication is dependent on another databaseName. */\n  authSource?: string;\n  /** Force server to assign _id values instead of driver. */\n  forceServerObjectId?: boolean;\n  /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n  readPreference?: ReadPreferenceLike;\n  /** A primary key factory object for generation of custom _id keys. */\n  pkFactory?: PkFactory;\n  /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n  readConcern?: ReadConcern;\n  /** Should retry failed writes */\n  retryWrites?: boolean;\n}\n\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```js\n * const { MongoClient } = require('mongodb');\n * // Connection url\n * const url = 'mongodb://localhost:27017';\n * // Database Name\n * const dbName = 'test';\n * // Connect using MongoClient\n * MongoClient.connect(url, function(err, client) {\n *   // Select the database by name\n *   const testDb = client.db(dbName);\n *   client.close();\n * });\n * ```\n */\nexport class Db {\n  /** @internal */\n  s: DbPrivate;\n\n  public static SYSTEM_NAMESPACE_COLLECTION = CONSTANTS.SYSTEM_NAMESPACE_COLLECTION;\n  public static SYSTEM_INDEX_COLLECTION = CONSTANTS.SYSTEM_INDEX_COLLECTION;\n  public static SYSTEM_PROFILE_COLLECTION = CONSTANTS.SYSTEM_PROFILE_COLLECTION;\n  public static SYSTEM_USER_COLLECTION = CONSTANTS.SYSTEM_USER_COLLECTION;\n  public static SYSTEM_COMMAND_COLLECTION = CONSTANTS.SYSTEM_COMMAND_COLLECTION;\n  public static SYSTEM_JS_COLLECTION = CONSTANTS.SYSTEM_JS_COLLECTION;\n\n  /**\n   * Creates a new Db instance\n   *\n   * @param client - The MongoClient for the database.\n   * @param databaseName - The name of the database this instance represents.\n   * @param options - Optional settings for Db construction\n   */\n  constructor(client: MongoClient, databaseName: string, options?: DbOptions) {\n    options = options ?? {};\n\n    // Filter the options\n    options = filterOptions(options, DB_OPTIONS_ALLOW_LIST);\n\n    // Ensure we have a valid db name\n    validateDatabaseName(databaseName);\n\n    // Internal state of the db object\n    this.s = {\n      // Client\n      client,\n      // Options\n      options,\n      // Logger instance\n      logger: new Logger('Db', options),\n      // Unpack read preference\n      readPreference: ReadPreference.fromOptions(options),\n      // Merge bson options\n      bsonOptions: resolveBSONOptions(options, client),\n      // Set up the primary key factory or fallback to ObjectId\n      pkFactory: options?.pkFactory ?? DEFAULT_PK_FACTORY,\n      // ReadConcern\n      readConcern: ReadConcern.fromOptions(options),\n      writeConcern: WriteConcern.fromOptions(options),\n      // Namespace\n      namespace: new MongoDBNamespace(databaseName)\n    };\n  }\n\n  get databaseName(): string {\n    return this.s.namespace.db;\n  }\n\n  // Options\n  get options(): DbOptions | undefined {\n    return this.s.options;\n  }\n\n  // slaveOk specified\n  get slaveOk(): boolean {\n    return this.s.readPreference?.preference !== 'primary' || false;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this.s.readConcern;\n  }\n\n  /**\n   * The current readPreference of the Db. If not explicitly defined for\n   * this Db, will be inherited from the parent MongoClient\n   */\n  get readPreference(): ReadPreference {\n    if (this.s.readPreference == null) {\n      return this.s.client.readPreference;\n    }\n\n    return this.s.readPreference;\n  }\n\n  get bsonOptions(): BSONSerializeOptions {\n    return this.s.bsonOptions;\n  }\n\n  // get the write Concern\n  get writeConcern(): WriteConcern | undefined {\n    return this.s.writeConcern;\n  }\n\n  get namespace(): string {\n    return this.s.namespace.toString();\n  }\n\n  /**\n   * Create a new collection on a server with the specified options. Use this to create capped collections.\n   * More information about command options available at https://docs.mongodb.com/manual/reference/command/create/\n   *\n   * @param name - The name of the collection to create\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  createCollection<TSchema extends Document = Document>(\n    name: string,\n    options?: CreateCollectionOptions\n  ): Promise<Collection<TSchema>>;\n  createCollection<TSchema extends Document = Document>(\n    name: string,\n    callback: Callback<Collection<TSchema>>\n  ): void;\n  createCollection<TSchema extends Document = Document>(\n    name: string,\n    options: CreateCollectionOptions | undefined,\n    callback: Callback<Collection<TSchema>>\n  ): void;\n  createCollection<TSchema extends Document = Document>(\n    name: string,\n    options?: CreateCollectionOptions | Callback<Collection>,\n    callback?: Callback<Collection>\n  ): Promise<Collection<TSchema>> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new CreateCollectionOperation(this, name, resolveOptions(this, options)) as TODO_NODE_3286,\n      callback\n    ) as TODO_NODE_3286;\n  }\n\n  /**\n   * Execute a command\n   *\n   * @remarks\n   * This command does not inherit options from the MongoClient.\n   *\n   * @param command - The command to run\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  command(command: Document): Promise<Document>;\n  command(command: Document, callback: Callback<Document>): void;\n  command(command: Document, options: RunCommandOptions): Promise<Document>;\n  command(command: Document, options: RunCommandOptions, callback: Callback<Document>): void;\n  command(\n    command: Document,\n    options?: RunCommandOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    // Intentionally, we do not inherit options from parent for this operation.\n    return executeOperation(\n      getTopology(this),\n      new RunCommandOperation(this, command, options ?? {}),\n      callback\n    );\n  }\n\n  /**\n   * Execute an aggregation framework pipeline against the database, needs MongoDB \\>= 3.6\n   *\n   * @param pipeline - An array of aggregation stages to be executed\n   * @param options - Optional settings for the command\n   */\n  aggregate<T = Document>(\n    pipeline: Document[] = [],\n    options?: AggregateOptions\n  ): AggregationCursor<T> {\n    if (arguments.length > 2) {\n      throw new MongoInvalidArgumentError('Method \"db.aggregate()\" accepts at most two arguments');\n    }\n    if (typeof pipeline === 'function') {\n      throw new MongoInvalidArgumentError('Argument \"pipeline\" must not be function');\n    }\n    if (typeof options === 'function') {\n      throw new MongoInvalidArgumentError('Argument \"options\" must not be function');\n    }\n\n    return new AggregationCursor(\n      getTopology(this),\n      this.s.namespace,\n      pipeline,\n      resolveOptions(this, options)\n    );\n  }\n\n  /** Return the Admin db instance */\n  admin(): Admin {\n    return new Admin(this);\n  }\n\n  /**\n   * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n   *\n   * @param name - the collection name we wish to access.\n   * @returns return the new Collection instance\n   */\n  collection<TSchema extends Document = Document>(\n    name: string,\n    options: CollectionOptions = {}\n  ): Collection<TSchema> {\n    if (typeof options === 'function') {\n      throw new MongoInvalidArgumentError('The callback form of this helper has been removed.');\n    }\n    const finalOptions = resolveOptions(this, options);\n    return new Collection<TSchema>(this, name, finalOptions);\n  }\n\n  /**\n   * Get all the db statistics.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  stats(): Promise<Document>;\n  stats(callback: Callback<Document>): void;\n  stats(options: DbStatsOptions): Promise<Document>;\n  stats(options: DbStatsOptions, callback: Callback<Document>): void;\n  stats(\n    options?: DbStatsOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    return executeOperation(\n      getTopology(this),\n      new DbStatsOperation(this, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * List all collections of this database with optional filter\n   *\n   * @param filter - Query to filter collections by\n   * @param options - Optional settings for the command\n   */\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: true }\n  ): ListCollectionsCursor<Pick<CollectionInfo, 'name' | 'type'>>;\n  listCollections(\n    filter: Document,\n    options: Exclude<ListCollectionsOptions, 'nameOnly'> & { nameOnly: false }\n  ): ListCollectionsCursor<CollectionInfo>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter?: Document, options?: ListCollectionsOptions): ListCollectionsCursor<T>;\n  listCollections<\n    T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo =\n      | Pick<CollectionInfo, 'name' | 'type'>\n      | CollectionInfo\n  >(filter: Document = {}, options: ListCollectionsOptions = {}): ListCollectionsCursor<T> {\n    return new ListCollectionsCursor<T>(this, filter, resolveOptions(this, options));\n  }\n\n  /**\n   * Rename a collection.\n   *\n   * @remarks\n   * This operation does not inherit options from the MongoClient.\n   *\n   * @param fromCollection - Name of current collection to rename\n   * @param toCollection - New name of of the collection\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string\n  ): Promise<Collection<TSchema>>;\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    callback: Callback<Collection<TSchema>>\n  ): void;\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options: RenameOptions\n  ): Promise<Collection<TSchema>>;\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options: RenameOptions,\n    callback: Callback<Collection<TSchema>>\n  ): void;\n  renameCollection<TSchema extends Document = Document>(\n    fromCollection: string,\n    toCollection: string,\n    options?: RenameOptions | Callback<Collection<TSchema>>,\n    callback?: Callback<Collection<TSchema>>\n  ): Promise<Collection<TSchema>> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    // Intentionally, we do not inherit options from parent for this operation.\n    options = { ...options, readPreference: ReadPreference.PRIMARY };\n\n    // Add return new collection\n    options.new_collection = true;\n\n    return executeOperation(\n      getTopology(this),\n      new RenameOperation(\n        this.collection<TSchema>(fromCollection) as TODO_NODE_3286,\n        toCollection,\n        options\n      ) as TODO_NODE_3286,\n      callback\n    );\n  }\n\n  /**\n   * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n   *\n   * @param name - Name of collection to drop\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  dropCollection(name: string): Promise<boolean>;\n  dropCollection(name: string, callback: Callback<boolean>): void;\n  dropCollection(name: string, options: DropCollectionOptions): Promise<boolean>;\n  dropCollection(name: string, options: DropCollectionOptions, callback: Callback<boolean>): void;\n  dropCollection(\n    name: string,\n    options?: DropCollectionOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new DropCollectionOperation(this, name, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Drop a database, removing it permanently from the server.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  dropDatabase(): Promise<boolean>;\n  dropDatabase(callback: Callback<boolean>): void;\n  dropDatabase(options: DropDatabaseOptions): Promise<boolean>;\n  dropDatabase(options: DropDatabaseOptions, callback: Callback<boolean>): void;\n  dropDatabase(\n    options?: DropDatabaseOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new DropDatabaseOperation(this, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Fetch all collections for the current db.\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  collections(): Promise<Collection[]>;\n  collections(callback: Callback<Collection[]>): void;\n  collections(options: ListCollectionsOptions): Promise<Collection[]>;\n  collections(options: ListCollectionsOptions, callback: Callback<Collection[]>): void;\n  collections(\n    options?: ListCollectionsOptions | Callback<Collection[]>,\n    callback?: Callback<Collection[]>\n  ): Promise<Collection[]> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new CollectionsOperation(this, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Creates an index on the db and collection.\n   *\n   * @param name - Name of the collection to create the index on.\n   * @param indexSpec - Specify the field to index, or an index specification\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  createIndex(name: string, indexSpec: IndexSpecification): Promise<string>;\n  createIndex(name: string, indexSpec: IndexSpecification, callback?: Callback<string>): void;\n  createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options: CreateIndexesOptions\n  ): Promise<string>;\n  createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options: CreateIndexesOptions,\n    callback: Callback<string>\n  ): void;\n  createIndex(\n    name: string,\n    indexSpec: IndexSpecification,\n    options?: CreateIndexesOptions | Callback<string>,\n    callback?: Callback<string>\n  ): Promise<string> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new CreateIndexOperation(this, name, indexSpec, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Add a user to the database\n   *\n   * @param username - The username for the new user\n   * @param password - An optional password for the new user\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  addUser(username: string): Promise<Document>;\n  addUser(username: string, callback: Callback<Document>): void;\n  addUser(username: string, password: string): Promise<Document>;\n  addUser(username: string, password: string, callback: Callback<Document>): void;\n  addUser(username: string, options: AddUserOptions): Promise<Document>;\n  addUser(username: string, options: AddUserOptions, callback: Callback<Document>): void;\n  addUser(username: string, password: string, options: AddUserOptions): Promise<Document>;\n  addUser(\n    username: string,\n    password: string,\n    options: AddUserOptions,\n    callback: Callback<Document>\n  ): void;\n  addUser(\n    username: string,\n    password?: string | AddUserOptions | Callback<Document>,\n    options?: AddUserOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof password === 'function') {\n      (callback = password), (password = undefined), (options = {});\n    } else if (typeof password !== 'string') {\n      if (typeof options === 'function') {\n        (callback = options), (options = password), (password = undefined);\n      } else {\n        (options = password), (callback = undefined), (password = undefined);\n      }\n    } else {\n      if (typeof options === 'function') (callback = options), (options = {});\n    }\n\n    return executeOperation(\n      getTopology(this),\n      new AddUserOperation(this, username, password, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Remove a user from a database\n   *\n   * @param username - The username to remove\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  removeUser(username: string): Promise<boolean>;\n  removeUser(username: string, callback: Callback<boolean>): void;\n  removeUser(username: string, options: RemoveUserOptions): Promise<boolean>;\n  removeUser(username: string, options: RemoveUserOptions, callback: Callback<boolean>): void;\n  removeUser(\n    username: string,\n    options?: RemoveUserOptions | Callback<boolean>,\n    callback?: Callback<boolean>\n  ): Promise<boolean> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new RemoveUserOperation(this, username, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Set the current profiling level of MongoDB\n   *\n   * @param level - The new profiling level (off, slow_only, all).\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  setProfilingLevel(level: ProfilingLevel): Promise<ProfilingLevel>;\n  setProfilingLevel(level: ProfilingLevel, callback: Callback<ProfilingLevel>): void;\n  setProfilingLevel(\n    level: ProfilingLevel,\n    options: SetProfilingLevelOptions\n  ): Promise<ProfilingLevel>;\n  setProfilingLevel(\n    level: ProfilingLevel,\n    options: SetProfilingLevelOptions,\n    callback: Callback<ProfilingLevel>\n  ): void;\n  setProfilingLevel(\n    level: ProfilingLevel,\n    options?: SetProfilingLevelOptions | Callback<ProfilingLevel>,\n    callback?: Callback<ProfilingLevel>\n  ): Promise<ProfilingLevel> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new SetProfilingLevelOperation(this, level, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Retrieve the current profiling Level for MongoDB\n   *\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  profilingLevel(): Promise<string>;\n  profilingLevel(callback: Callback<string>): void;\n  profilingLevel(options: ProfilingLevelOptions): Promise<string>;\n  profilingLevel(options: ProfilingLevelOptions, callback: Callback<string>): void;\n  profilingLevel(\n    options?: ProfilingLevelOptions | Callback<string>,\n    callback?: Callback<string>\n  ): Promise<string> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new ProfilingLevelOperation(this, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Retrieves this collections index info.\n   *\n   * @param name - The name of the collection.\n   * @param options - Optional settings for the command\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  indexInformation(name: string): Promise<Document>;\n  indexInformation(name: string, callback: Callback<Document>): void;\n  indexInformation(name: string, options: IndexInformationOptions): Promise<Document>;\n  indexInformation(\n    name: string,\n    options: IndexInformationOptions,\n    callback: Callback<Document>\n  ): void;\n  indexInformation(\n    name: string,\n    options?: IndexInformationOptions | Callback<Document>,\n    callback?: Callback<Document>\n  ): Promise<Document> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n\n    return executeOperation(\n      getTopology(this),\n      new IndexInformationOperation(this, name, resolveOptions(this, options)),\n      callback\n    );\n  }\n\n  /**\n   * Unref all sockets\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n  unref(): void {\n    getTopology(this).unref();\n  }\n\n  /**\n   * Create a new Change Stream, watching for new changes (insertions, updates,\n   * replacements, deletions, and invalidations) in this database. Will ignore all\n   * changes to system collections.\n   *\n   * @param pipeline - An array of {@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n   * @param options - Optional settings for the command\n   */\n  watch<TSchema = Document>(\n    pipeline: Document[] = [],\n    options: ChangeStreamOptions = {}\n  ): ChangeStream<TSchema> {\n    // Allow optionally not specifying a pipeline\n    if (!Array.isArray(pipeline)) {\n      options = pipeline;\n      pipeline = [];\n    }\n\n    return new ChangeStream<TSchema>(this, pipeline, resolveOptions(this, options));\n  }\n\n  /** Return the db logger */\n  getLogger(): Logger {\n    return this.s.logger;\n  }\n\n  get logger(): Logger {\n    return this.s.logger;\n  }\n}\n\n// TODO(NODE-3484): Refactor into MongoDBNamespace\n// Validate the database name\nfunction validateDatabaseName(databaseName: string) {\n  if (typeof databaseName !== 'string')\n    throw new MongoInvalidArgumentError('Database name must be a string');\n  if (databaseName.length === 0)\n    throw new MongoInvalidArgumentError('Database name cannot be the empty string');\n  if (databaseName === '$external') return;\n\n  const invalidChars = [' ', '.', '$', '/', '\\\\'];\n  for (let i = 0; i < invalidChars.length; i++) {\n    if (databaseName.indexOf(invalidChars[i]) !== -1)\n      throw new MongoAPIError(`database names cannot contain the character '${invalidChars[i]}'`);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}