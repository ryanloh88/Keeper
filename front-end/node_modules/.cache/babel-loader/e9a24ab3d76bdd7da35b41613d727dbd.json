{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DistinctOperation = void 0;\n\nconst operation_1 = require(\"./operation\");\n\nconst command_1 = require(\"./command\");\n\nconst utils_1 = require(\"../utils\");\n\nconst error_1 = require(\"../error\");\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\n\n\nclass DistinctOperation extends command_1.CommandOperation {\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param collection - Collection instance.\n   * @param key - Field of the document to find distinct values for.\n   * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection, key, query, options) {\n    super(collection, options);\n    this.options = options !== null && options !== void 0 ? options : {};\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n\n  execute(server, session, callback) {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options; // Distinct command\n\n    const cmd = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    }; // Add maxTimeMS if defined\n\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    } // Do we have a readConcern specified\n\n\n    (0, utils_1.decorateWithReadConcern)(cmd, coll, options); // Have we specified collation\n\n    try {\n      (0, utils_1.decorateWithCollation)(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    if (this.explain && (0, utils_1.maxWireVersion)(server) < 4) {\n      callback(new error_1.MongoCompatibilityError(`Server ${server.name} does not support explain on distinct`));\n      return;\n    }\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, this.explain ? result : result.values);\n    });\n  }\n\n}\n\nexports.DistinctOperation = DistinctOperation;\n(0, operation_1.defineAspects)(DistinctOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE]);","map":{"version":3,"sources":["/Users/ryanlohyongrui/Documents/React.js/keeper-app/node_modules/mongodb/src/operations/distinct.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAIA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;AAMA;;;AAGG;;;AACH,MAAa,iBAAb,SAAuC,SAAA,CAAA,gBAAvC,CAA8D;AAQ5D;;;;;;;AAOG;AACH,EAAA,WAAA,CAAY,UAAZ,EAAoC,GAApC,EAAiD,KAAjD,EAAkE,OAAlE,EAA2F;AACzF,UAAM,UAAN,EAAkB,OAAlB;AAEA,SAAK,OAAL,GAAe,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAA,OAAA,GAAW,EAA1B;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,GAAL,GAAW,GAAX;AACA,SAAK,KAAL,GAAa,KAAb;AACD;;AAED,EAAA,OAAO,CAAC,MAAD,EAAiB,OAAjB,EAAyC,QAAzC,EAAkE;AACvE,UAAM,IAAI,GAAG,KAAK,UAAlB;AACA,UAAM,GAAG,GAAG,KAAK,GAAjB;AACA,UAAM,KAAK,GAAG,KAAK,KAAnB;AACA,UAAM,OAAO,GAAG,KAAK,OAArB,CAJuE,CAMvE;;AACA,UAAM,GAAG,GAAa;AACpB,MAAA,QAAQ,EAAE,IAAI,CAAC,cADK;AAEpB,MAAA,GAAG,EAAE,GAFe;AAGpB,MAAA,KAAK,EAAE;AAHa,KAAtB,CAPuE,CAavE;;AACA,QAAI,OAAO,OAAO,CAAC,SAAf,KAA6B,QAAjC,EAA2C;AACzC,MAAA,GAAG,CAAC,SAAJ,GAAgB,OAAO,CAAC,SAAxB;AACD,KAhBsE,CAkBvE;;;AACA,KAAA,GAAA,OAAA,CAAA,uBAAA,EAAwB,GAAxB,EAA6B,IAA7B,EAAmC,OAAnC,EAnBuE,CAqBvE;;AACA,QAAI;AACF,OAAA,GAAA,OAAA,CAAA,qBAAA,EAAsB,GAAtB,EAA2B,IAA3B,EAAiC,OAAjC;AACD,KAFD,CAEE,OAAO,GAAP,EAAY;AACZ,aAAO,QAAQ,CAAC,GAAD,CAAf;AACD;;AAED,QAAI,KAAK,OAAL,IAAgB,CAAA,GAAA,OAAA,CAAA,cAAA,EAAe,MAAf,IAAyB,CAA7C,EAAgD;AAC9C,MAAA,QAAQ,CACN,IAAI,OAAA,CAAA,uBAAJ,CAA4B,UAAU,MAAM,CAAC,IAAI,uCAAjD,CADM,CAAR;AAGA;AACD;;AAED,UAAM,cAAN,CAAqB,MAArB,EAA6B,OAA7B,EAAsC,GAAtC,EAA2C,CAAC,GAAD,EAAM,MAAN,KAAgB;AACzD,UAAI,GAAJ,EAAS;AACP,QAAA,QAAQ,CAAC,GAAD,CAAR;AACA;AACD;;AAED,MAAA,QAAQ,CAAC,SAAD,EAAY,KAAK,OAAL,GAAe,MAAf,GAAwB,MAAM,CAAC,MAA3C,CAAR;AACD,KAPD;AAQD;;AApE2D;;AAA9D,OAAA,CAAA,iBAAA,GAAA,iBAAA;AAuEA,CAAA,GAAA,WAAA,CAAA,aAAA,EAAc,iBAAd,EAAiC,CAAC,WAAA,CAAA,MAAA,CAAO,cAAR,EAAwB,WAAA,CAAA,MAAA,CAAO,SAA/B,EAA0C,WAAA,CAAA,MAAA,CAAO,WAAjD,CAAjC","sourcesContent":["import { Aspect, defineAspects } from './operation';\nimport { CommandOperation, CommandOperationOptions } from './command';\nimport { decorateWithCollation, decorateWithReadConcern, Callback, maxWireVersion } from '../utils';\nimport type { Document } from '../bson';\nimport type { Server } from '../sdam/server';\nimport type { Collection } from '../collection';\nimport { MongoCompatibilityError } from '../error';\nimport type { ClientSession } from '../sessions';\n\n/** @public */\nexport type DistinctOptions = CommandOperationOptions;\n\n/**\n * Return a list of distinct values for the given key across a collection.\n * @internal\n */\nexport class DistinctOperation extends CommandOperation<any[]> {\n  options: DistinctOptions;\n  collection: Collection;\n  /** Field of the document to find distinct values for. */\n  key: string;\n  /** The query for filtering the set of documents to which we apply the distinct filter. */\n  query: Document;\n\n  /**\n   * Construct a Distinct operation.\n   *\n   * @param collection - Collection instance.\n   * @param key - Field of the document to find distinct values for.\n   * @param query - The query for filtering the set of documents to which we apply the distinct filter.\n   * @param options - Optional settings. See Collection.prototype.distinct for a list of options.\n   */\n  constructor(collection: Collection, key: string, query: Document, options?: DistinctOptions) {\n    super(collection, options);\n\n    this.options = options ?? {};\n    this.collection = collection;\n    this.key = key;\n    this.query = query;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<any[]>): void {\n    const coll = this.collection;\n    const key = this.key;\n    const query = this.query;\n    const options = this.options;\n\n    // Distinct command\n    const cmd: Document = {\n      distinct: coll.collectionName,\n      key: key,\n      query: query\n    };\n\n    // Add maxTimeMS if defined\n    if (typeof options.maxTimeMS === 'number') {\n      cmd.maxTimeMS = options.maxTimeMS;\n    }\n\n    // Do we have a readConcern specified\n    decorateWithReadConcern(cmd, coll, options);\n\n    // Have we specified collation\n    try {\n      decorateWithCollation(cmd, coll, options);\n    } catch (err) {\n      return callback(err);\n    }\n\n    if (this.explain && maxWireVersion(server) < 4) {\n      callback(\n        new MongoCompatibilityError(`Server ${server.name} does not support explain on distinct`)\n      );\n      return;\n    }\n\n    super.executeCommand(server, session, cmd, (err, result) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      callback(undefined, this.explain ? result : result.values);\n    });\n  }\n}\n\ndefineAspects(DistinctOperation, [Aspect.READ_OPERATION, Aspect.RETRYABLE, Aspect.EXPLAINABLE]);\n"]},"metadata":{},"sourceType":"script"}